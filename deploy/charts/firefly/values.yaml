# Templates the firefly.core configuration file of FireFly, and in some cases configures which ports are exposed.
config:
  # Enables the FireFly debug port on 6060 and `DEBUG` level logs
  debugEnabled: false

  # Enables the Admin API port for dynamic configuration
  adminEnabled: true

  # Puts a fresh FireFly node into the preinit state, allowing an operator to then setup smart contracts, apply database migrations, etc. before re-configuring the node to proceed.
  # It is _not_ recommended to configure FireFly nodes in a preinit state for non-development scenarios.
  preInit: false

  # The name of the organization the FireFly node belongs to
  organizationName: ""

  # The blockchain signing key of the organization e.g. the Ethereum account address
  organizationKey: ""

  # The Ethereum address of the pre-deployed FireFly smart contract
  fireflyContractAddress: "/instances/contractAddress"

  # The Postgres URL (including credentials and DB) for FireFly to for the database plugin
  postgresUrl: ""

  # Whether or not to apply schema migrations automatically on startup, not recommended for production
  postgresAutomigrate: false

  # Whether to create a migration job to perform migrations each time a new tag is pushed for the FireFly image (supports DB creation)
  postgresMigrationJob: false

  # The URL of the HTTPS DataExchange for the node to use for the dataexchange plugin i.e. private messaging, only needed if `dataexchange.enabled` is set to false
  dataexchangeUrl: ""

  # The API key used to authenticate to HTTPS DataExchange, only needed if `dataexchange.enabled` is set to false
  dataexchangeAPIKey: ""

  # The URL of the IPFS API server to use for the publicstorage plugin, in some cases this is the same as the Gateway URL, see below
  ipfsApiUrl: ""

  # The basic auth username to use for authenticating to the IPFS API server
  ipfsApiUsername: ""

  # The basic auth password to use for authenticating to the IPFS API server
  ipfsApiPassword: ""

  # The URL of the IPFS Gateway server, in some cases this is the same as the API URL
  ipfsGatewayUrl: ""

  # The basic auth username to use for authenticating to the IPFS Gateway server
  ipfsGatewayUsername: ""

  # The basic auth password to use for authenticating to the IPFS Gateway server
  ipfsGatewayPassword: ""

  # The URL of the Ethconnect API and WS server to use for the blockchain plugin of type `ethereum`
  ethconnectUrl: ""

  # The basic auth username to use for authenticating to Ethconnect
  ethconnectUsername: ""

  # The basic auth password to use for authenticating to Ethconnect
  ethconnectPassword: ""

  # The short prefix FireFly will prepend to certain headers it sends to Ethconnect i.e. ff or kld
  ethconnectPrefixShort: ""

  # The long prefix FireFly will prepend to certain headers it sends to Ethconnect i.e. FireFly or Kaleido
  ethconnectPrefixLong: ""

  # Whether to use a Job to perform auto-registration of the FireFly runtime.
  # Note registration will not be successful until the new node has caught up with the head of the chain.
  registrationJob: false

  # The following values can be used to override the templating of specific plugin sections, in the case where
  # the user wants greater control to template the sections using global values, additional helpers, etc. OR if they
  # want to use other plugin types i.e. `fabric` which currently do not exist at the time of writing.

  dataexchangeOverride: {}

  databaseOverride: {}

  publicstorageOverride: {}

  blockchainOverride: {}
   # type: ethereum
   # ethereum:
   #   ethconnect:
   #     url: http://ethconnect_0:8080
   #     instance: /contracts/firefly
   #     topic: "0"

  # Instead of using the provided config template from _helpers.tpl, users can use to customize the config using their own global values, etc.
  # See the firefly.coreConfig helper for an example of a Go-templated config file that could be provided here as a multiline string.
  templateOverride: ""

# Configures the properties of the StatefulSet, Service, and optionally Ingress used to deploy and expose FireFly
core:
  image:
    repository: ghcr.io/hyperledger/firefly
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    # tag: latest

  extraEnv: []
    # - name: FIREFLY_LOG_LEVEL
    #   value: debug

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    httpPort: 5000
    adminPort: 5001
    debugPort: 6060

  # NOTE: The Ingress will only expose the HTTP API and never the Admin or Debug APIs
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Configures the properties of the StatefulSet, Service, and optionally Ingress used to deploy and expose FireFly HTTPS DataExchange
dataexchange:

  # Toggles whether or not to deploy HTTPS DataExchange alongside FireFly, and therefore how the dataexchange section of its config will be templated
  enabled: true

  # The API key the HTTPS DataExchange will use to secure its API and WS server for communication from FireFly
  apiKey: ""

  # A Secret providing the mTLS certificate the HTTPS DataExchange will use to authenticate to peers
  tlsSecret:
    enabled: true
    name: ""

  # Configures whether or not to generate a mTLS certificate for peer-to-peer communications
  # using cert-manager's Certificate resource, recommended
  certificate:
    enabled: false
    issuerRef: {}
     # name: internal-ca
     # kind: ClusterIssuer

  extraEnv: []
    # - name: LOG_LEVEL
    #   value: DEBUG

  image:
    repository: ghcr.io/hyperledger/firefly-dataexchange-https
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v0.9.2

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    apiPort: 5000
    p2pPort: 5001

  # The Ingress templated will only expose the HTTPS DataExchange P2P endpoint, as its API will only need to be accessible to FireFly
  # NOTE: TLS is not templatable for the Ingress since it is provided as part of the mTLS certificate above. TLS passthrough
  #       must be enabled for the Ingress in order for mTLS to work, make sure to set the appropriate annotation for your
  #       respective Ingress controller. See below for an example of the passthrough annotation for ingress-nginx.
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    hosts:
      - host: chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}
