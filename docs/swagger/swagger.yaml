components: {}
info:
  title: FireFly
  version: "1.0"
openapi: 3.0.2
paths:
  /namespaces:
    get:
      description: 'TODO: Description'
      operationId: getNamespaces
      parameters:
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: confirmed
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: description
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: message
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The time the namespace was created
                    description:
                      description: A description of the namespace
                      type: string
                    id:
                      description: The UUID of the namespace. For locally established
                        namespaces will be different on each node in the network.
                        For broadcast namespaces, will be the same on every node
                    message:
                      description: The UUID of broadcast message used to establish
                        the namespace. Unset for local namespaces
                    name:
                      description: The namespace name
                      type: string
                    type:
                      description: The type of the namespace
                      enum:
                      - local
                      - broadcast
                      - system
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewNamespace
      parameters:
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: A description of the namespace
                  type: string
                name:
                  description: The namespace name
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the namespace was created
                  description:
                    description: A description of the namespace
                    type: string
                  id:
                    description: The UUID of the namespace. For locally established
                      namespaces will be different on each node in the network. For
                      broadcast namespaces, will be the same on every node
                  message:
                    description: The UUID of broadcast message used to establish the
                      namespace. Unset for local namespaces
                  name:
                    description: The namespace name
                    type: string
                  type:
                    description: The type of the namespace
                    enum:
                    - local
                    - broadcast
                    - system
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the namespace was created
                  description:
                    description: A description of the namespace
                    type: string
                  id:
                    description: The UUID of the namespace. For locally established
                      namespaces will be different on each node in the network. For
                      broadcast namespaces, will be the same on every node
                  message:
                    description: The UUID of broadcast message used to establish the
                      namespace. Unset for local namespaces
                  name:
                    description: The namespace name
                    type: string
                  type:
                    description: The type of the namespace
                    enum:
                    - local
                    - broadcast
                    - system
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}:
    get:
      description: 'TODO: Description'
      operationId: getNamespace
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the namespace was created
                  description:
                    description: A description of the namespace
                    type: string
                  id:
                    description: The UUID of the namespace. For locally established
                      namespaces will be different on each node in the network. For
                      broadcast namespaces, will be the same on every node
                  message:
                    description: The UUID of broadcast message used to establish the
                      namespace. Unset for local namespaces
                  name:
                    description: The namespace name
                    type: string
                  type:
                    description: The type of the namespace
                    enum:
                    - local
                    - broadcast
                    - system
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/apis:
    get:
      description: 'TODO: Description'
      operationId: getContractAPIs
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: interface
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  description:
                    description: A description of the smart contract this FFI represents
                    type: string
                  events:
                    description: An array of smart contract event definitions
                    items:
                      description: An array of smart contract event definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this event is part of
                        description:
                          description: A description of the smart contract event
                          type: string
                        id:
                          description: The UUID of the FFI event definition
                        name:
                          description: The name of the event
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of event parameter/argument definitions
                          items:
                            description: An array of event parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this event within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple event overrides with the same name
                          type: string
                      type: object
                    type: array
                  id:
                    description: The UUID of the FireFly interface (FFI) smart contract
                      definition
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this FFI to the network
                  methods:
                    description: An array of smart contract method definitions
                    items:
                      description: An array of smart contract method definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this method is part of
                        description:
                          description: A description of the smart contract method
                          type: string
                        id:
                          description: The UUID of the FFI method definition
                        name:
                          description: The name of the method
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of method parameter/argument definitions
                          items:
                            description: An array of method parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this method within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple method overrides with the same name
                          type: string
                        returns:
                          description: An array of method return definitions
                          items:
                            description: An array of method return definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  name:
                    description: The name of the FFI - usually matching the smart
                      contract name
                    type: string
                  namespace:
                    description: The namespace of the FFI
                    type: string
                  version:
                    description: A version for the FFI - use of semantic versioning
                      such as 'v1.0.1' is encouraged
                    type: string
                type: object
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewContractAPI
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                interface:
                  description: Reference to the FireFly Interface definition associated
                    with the contract API
                  properties:
                    id:
                      description: The UUID of the FireFly interface
                    name:
                      description: The name of the FireFly interface
                      type: string
                    version:
                      description: The version of the FireFly interface
                      type: string
                  type: object
                location:
                  description: If this API is tied to an individual instance of a
                    smart contract, this field can include a blockchain specific contract
                    identifier. For example an Ethereum contract address, or a Fabric
                    chaincode name and channel
                  type: string
                name:
                  description: The name that is used in the URL to access the API
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the contract API
                  interface:
                    description: Reference to the FireFly Interface definition associated
                      with the contract API
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: If this API is tied to an individual instance of
                      a smart contract, this field can include a blockchain specific
                      contract identifier. For example an Ethereum contract address,
                      or a Fabric chaincode name and channel
                    type: string
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this API to the network
                  name:
                    description: The name that is used in the URL to access the API
                    type: string
                  namespace:
                    description: The namespace of the contract API
                    type: string
                  urls:
                    description: The URLs to use to access the API
                    properties:
                      openapi:
                        description: The URL to download the OpenAPI v3 (Swagger)
                          description for the API generated in JSON or YAML format
                        type: string
                      ui:
                        description: The URL to use in a web browser to access the
                          SwaggerUI explorer/exerciser for the API
                        type: string
                    type: object
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the contract API
                  interface:
                    description: Reference to the FireFly Interface definition associated
                      with the contract API
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: If this API is tied to an individual instance of
                      a smart contract, this field can include a blockchain specific
                      contract identifier. For example an Ethereum contract address,
                      or a Fabric chaincode name and channel
                    type: string
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this API to the network
                  name:
                    description: The name that is used in the URL to access the API
                    type: string
                  namespace:
                    description: The namespace of the contract API
                    type: string
                  urls:
                    description: The URLs to use to access the API
                    properties:
                      openapi:
                        description: The URL to download the OpenAPI v3 (Swagger)
                          description for the API generated in JSON or YAML format
                        type: string
                      ui:
                        description: The URL to use in a web browser to access the
                          SwaggerUI explorer/exerciser for the API
                        type: string
                    type: object
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/apis/{apiName}:
    get:
      description: 'TODO: Description'
      operationId: getContractAPIByName
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: apiName
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the contract API
                  interface:
                    description: Reference to the FireFly Interface definition associated
                      with the contract API
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: If this API is tied to an individual instance of
                      a smart contract, this field can include a blockchain specific
                      contract identifier. For example an Ethereum contract address,
                      or a Fabric chaincode name and channel
                    type: string
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this API to the network
                  name:
                    description: The name that is used in the URL to access the API
                    type: string
                  namespace:
                    description: The namespace of the contract API
                    type: string
                  urls:
                    description: The URLs to use to access the API
                    properties:
                      openapi:
                        description: The URL to download the OpenAPI v3 (Swagger)
                          description for the API generated in JSON or YAML format
                        type: string
                      ui:
                        description: The URL to use in a web browser to access the
                          SwaggerUI explorer/exerciser for the API
                        type: string
                    type: object
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/apis/{apiName}/invoke/{methodPath}:
    post:
      description: 'TODO: Description'
      operationId: postContractAPIInvoke
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: apiName
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: path
        name: methodPath
        required: true
        schema:
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                input:
                  additionalProperties:
                    description: A map of named inputs. The name and type of each
                      input must be compatible with the FFI description of the method,
                      so that FireFly knows how to serialize it to the blockchain
                      via the connector
                  description: A map of named inputs. The name and type of each input
                    must be compatible with the FFI description of the method, so
                    that FireFly knows how to serialize it to the blockchain via the
                    connector
                  type: object
                key:
                  description: The blockchain signing key that will sign the invocation.
                    Defaults to the first signing key of the organization that operates
                    the node
                  type: string
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the operation created to track the transaction
                      submission through to completion
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/apis/{apiName}/listen/{eventPath}:
    post:
      description: 'TODO: Description'
      operationId: postContractAPIListen
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: apiName
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: path
        name: eventPath
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
                name:
                  description: A descriptive name for the listener
                  type: string
                options:
                  description: Options that control how the listener subscribes to
                    events from the underlying blockchain
                  properties:
                    firstEvent:
                      description: A blockchain specific string, such as a block number,
                        to start listening from. The special strings 'oldest' and
                        'newest' are supported by all blockchain connectors. Default
                        is 'newest'
                      type: string
                  type: object
                topic:
                  description: A topic to set on the FireFly event that is emitted
                    each time a blockchain event is detected from the blockchain.
                    Setting this topic on a number of listeners allows applications
                    to easily subscribe to all events they need
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the listener
                  event:
                    description: The definition of the event, either provided in-line
                      when creating the listener, or extracted from the referenced
                      FFI
                    properties:
                      description:
                        description: A description of the smart contract event
                        type: string
                      name:
                        description: The name of the event
                        type: string
                      params:
                        description: An array of event parameter/argument definitions
                        items:
                          description: An array of event parameter/argument definitions
                          properties:
                            name:
                              description: The name of the parameter. Note that parameters
                                must be ordered correctly on the FFI, according to
                                the order in the blockchain smart contract
                              type: string
                            schema:
                              description: FireFly uses an extended subset of JSON
                                Schema to describe parameters, similar to OpenAPI/Swagger.
                                Converters are available for native blockchain interface
                                definitions / type systems - such as an Ethereum ABI.
                                See the documentation for more detail
                              type: string
                          type: object
                        type: array
                    type: object
                  id:
                    description: The UUID of the smart contract listener
                  interface:
                    description: A reference to an existing FFI, containing pre-registered
                      type information for the event
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: A blockchain specific contract identifier. For example
                      an Ethereum contract address, or a Fabric chaincode name and
                      channel
                    type: string
                  name:
                    description: A descriptive name for the listener
                    type: string
                  namespace:
                    description: The namespace of the listener, which defines the
                      namespace of all blockchain events detected by this listener
                    type: string
                  options:
                    description: Options that control how the listener subscribes
                      to events from the underlying blockchain
                    properties:
                      firstEvent:
                        description: A blockchain specific string, such as a block
                          number, to start listening from. The special strings 'oldest'
                          and 'newest' are supported by all blockchain connectors.
                          Default is 'newest'
                        type: string
                    type: object
                  protocolId:
                    description: An ID assigned by the blockchain connector to this
                      listener
                    type: string
                  topic:
                    description: A topic to set on the FireFly event that is emitted
                      each time a blockchain event is detected from the blockchain.
                      Setting this topic on a number of listeners allows applications
                      to easily subscribe to all events they need
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/apis/{apiName}/query/{methodPath}:
    post:
      description: 'TODO: Description'
      operationId: postContractAPIQuery
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: apiName
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: path
        name: methodPath
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                input:
                  additionalProperties:
                    description: A map of named inputs. The name and type of each
                      input must be compatible with the FFI description of the method,
                      so that FireFly knows how to serialize it to the blockchain
                      via the connector
                  description: A map of named inputs. The name and type of each input
                    must be compatible with the FFI description of the method, so
                    that FireFly knows how to serialize it to the blockchain via the
                    connector
                  type: object
                key:
                  description: The blockchain signing key that will sign the invocation.
                    Defaults to the first signing key of the organization that operates
                    the node
                  type: string
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/apis/{id}:
    put:
      description: 'TODO: Description'
      operationId: putContractAPI
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: id
        required: true
        schema:
          example: id
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                interface:
                  description: Reference to the FireFly Interface definition associated
                    with the contract API
                  properties:
                    id:
                      description: The UUID of the FireFly interface
                    name:
                      description: The name of the FireFly interface
                      type: string
                    version:
                      description: The version of the FireFly interface
                      type: string
                  type: object
                location:
                  description: If this API is tied to an individual instance of a
                    smart contract, this field can include a blockchain specific contract
                    identifier. For example an Ethereum contract address, or a Fabric
                    chaincode name and channel
                  type: string
                name:
                  description: The name that is used in the URL to access the API
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the contract API
                  interface:
                    description: Reference to the FireFly Interface definition associated
                      with the contract API
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: If this API is tied to an individual instance of
                      a smart contract, this field can include a blockchain specific
                      contract identifier. For example an Ethereum contract address,
                      or a Fabric chaincode name and channel
                    type: string
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this API to the network
                  name:
                    description: The name that is used in the URL to access the API
                    type: string
                  namespace:
                    description: The namespace of the contract API
                    type: string
                  urls:
                    description: The URLs to use to access the API
                    properties:
                      openapi:
                        description: The URL to download the OpenAPI v3 (Swagger)
                          description for the API generated in JSON or YAML format
                        type: string
                      ui:
                        description: The URL to use in a web browser to access the
                          SwaggerUI explorer/exerciser for the API
                        type: string
                    type: object
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the contract API
                  interface:
                    description: Reference to the FireFly Interface definition associated
                      with the contract API
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: If this API is tied to an individual instance of
                      a smart contract, this field can include a blockchain specific
                      contract identifier. For example an Ethereum contract address,
                      or a Fabric chaincode name and channel
                    type: string
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this API to the network
                  name:
                    description: The name that is used in the URL to access the API
                    type: string
                  namespace:
                    description: The namespace of the contract API
                    type: string
                  urls:
                    description: The URLs to use to access the API
                    properties:
                      openapi:
                        description: The URL to download the OpenAPI v3 (Swagger)
                          description for the API generated in JSON or YAML format
                        type: string
                      ui:
                        description: The URL to use in a web browser to access the
                          SwaggerUI explorer/exerciser for the API
                        type: string
                    type: object
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/batches:
    get:
      description: 'TODO: Description'
      operationId: getBatches
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: author
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: confirmed
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: group
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: node
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: payloadref
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    author:
                      description: The DID of identity of the submitter
                      type: string
                    confirmed:
                      description: The time when the batch was confirmed
                    created:
                      description: The time the batch was sealed
                    group:
                      description: The privacy group the batch is sent to, for private
                        batches
                    hash:
                      description: The hash of the manifest of the batch
                    id:
                      description: The UUID of the batch
                    key:
                      description: The on-chain signing key used to sign the transaction
                      type: string
                    manifest:
                      description: The manifest of the batch
                      type: string
                    namespace:
                      description: The namespace of the batch
                      type: string
                    node:
                      description: The UUID of the node that generated the batch
                    payloadRef:
                      description: For broadcast batches, this is the reference to
                        the binary batch in shared storage
                      type: string
                    tx:
                      description: The FireFly transaction associated with this batch
                      properties:
                        id:
                          description: The UUID of the FireFly transaction
                        type:
                          description: The type of the FireFly transaction
                          type: string
                      type: object
                    type:
                      description: The type of the batch
                      enum:
                      - broadcast
                      - private
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/batches/{batchid}:
    get:
      description: 'TODO: Description'
      operationId: getBatchByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: batchid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  author:
                    description: The DID of identity of the submitter
                    type: string
                  confirmed:
                    description: The time when the batch was confirmed
                  created:
                    description: The time the batch was sealed
                  group:
                    description: The privacy group the batch is sent to, for private
                      batches
                  hash:
                    description: The hash of the manifest of the batch
                  id:
                    description: The UUID of the batch
                  key:
                    description: The on-chain signing key used to sign the transaction
                    type: string
                  manifest:
                    description: The manifest of the batch
                    type: string
                  namespace:
                    description: The namespace of the batch
                    type: string
                  node:
                    description: The UUID of the node that generated the batch
                  payloadRef:
                    description: For broadcast batches, this is the reference to the
                      binary batch in shared storage
                    type: string
                  tx:
                    description: The FireFly transaction associated with this batch
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of the batch
                    enum:
                    - broadcast
                    - private
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/blockchainevents:
    get:
      description: 'TODO: Description'
      operationId: getBlockchainEvents
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: listener
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: protocolid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: source
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: timestamp
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    id:
                      description: The UUID assigned to the event by FireFly
                    info:
                      additionalProperties:
                        description: Detailed blockchain specific information about
                          the event, as generated by the blockchain connector
                      description: Detailed blockchain specific information about
                        the event, as generated by the blockchain connector
                      type: object
                    listener:
                      description: The UUID of the listener that detected this event,
                        or nil for built-in events in the system namespace
                    name:
                      description: The name of the event in the blockchain smart contract
                      type: string
                    namespace:
                      description: The namespace of the listener that detected this
                        blockchain event
                      type: string
                    output:
                      additionalProperties:
                        description: The data output by the event, parsed to JSON
                          according to the interface of the smart contract
                      description: The data output by the event, parsed to JSON according
                        to the interface of the smart contract
                      type: object
                    protocolId:
                      description: A alphanumerically sortable string that represents
                        this event uniquely on the blockchain. Convention for plugins
                        is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX
                      type: string
                    source:
                      description: The blockchain plugin or token service that detected
                        the event
                      type: string
                    timestamp:
                      description: The time allocated to this event by the blockchain.
                        This is the block timestamp for most blockchain connectors
                    tx:
                      description: If this blockchain event is coorelated to FireFly
                        transaction such as a FireFly submitted token transfer, this
                        field is set to the UUID of the FireFly transaction
                      properties:
                        id:
                          description: The UUID of the FireFly transaction
                        type:
                          description: The type of the FireFly transaction
                          type: string
                      type: object
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/blockchainevents/{id}:
    get:
      description: 'TODO: Description'
      operationId: getBlockchainEventByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID assigned to the event by FireFly
                  info:
                    additionalProperties:
                      description: Detailed blockchain specific information about
                        the event, as generated by the blockchain connector
                    description: Detailed blockchain specific information about the
                      event, as generated by the blockchain connector
                    type: object
                  listener:
                    description: The UUID of the listener that detected this event,
                      or nil for built-in events in the system namespace
                  name:
                    description: The name of the event in the blockchain smart contract
                    type: string
                  namespace:
                    description: The namespace of the listener that detected this
                      blockchain event
                    type: string
                  output:
                    additionalProperties:
                      description: The data output by the event, parsed to JSON according
                        to the interface of the smart contract
                    description: The data output by the event, parsed to JSON according
                      to the interface of the smart contract
                    type: object
                  protocolId:
                    description: A alphanumerically sortable string that represents
                      this event uniquely on the blockchain. Convention for plugins
                      is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX
                    type: string
                  source:
                    description: The blockchain plugin or token service that detected
                      the event
                    type: string
                  timestamp:
                    description: The time allocated to this event by the blockchain.
                      This is the block timestamp for most blockchain connectors
                  tx:
                    description: If this blockchain event is coorelated to FireFly
                      transaction such as a FireFly submitted token transfer, this
                      field is set to the UUID of the FireFly transaction
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/charts/histogram/{collection}:
    get:
      description: 'TODO: Description'
      operationId: getChartHistogram
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: collection
        required: true
        schema:
          type: string
      - description: Start time of the data to be fetched
        in: query
        name: startTime
        schema:
          type: string
      - description: End time of the data to be fetched
        in: query
        name: endTime
        schema:
          type: string
      - description: Number of buckets between start time and end time
        in: query
        name: buckets
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    count:
                      description: Total count of entries in this time bucket within
                        the histogram
                      type: string
                    isCapped:
                      description: Indicates whether there are more results in this
                        bucket that are not being displayed
                      type: boolean
                    timestamp:
                      description: Starting timestamp for the bucket
                    types:
                      description: Array of separate counts for individual types of
                        record within the bucket
                      items:
                        description: Array of separate counts for individual types
                          of record within the bucket
                        properties:
                          count:
                            description: Count of entries of a given type within a
                              bucket
                            type: string
                          type:
                            description: Name of the type
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/interfaces:
    get:
      description: 'TODO: Description'
      operationId: getContractInterfaces
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: version
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  description:
                    description: A description of the smart contract this FFI represents
                    type: string
                  events:
                    description: An array of smart contract event definitions
                    items:
                      description: An array of smart contract event definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this event is part of
                        description:
                          description: A description of the smart contract event
                          type: string
                        id:
                          description: The UUID of the FFI event definition
                        name:
                          description: The name of the event
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of event parameter/argument definitions
                          items:
                            description: An array of event parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this event within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple event overrides with the same name
                          type: string
                      type: object
                    type: array
                  id:
                    description: The UUID of the FireFly interface (FFI) smart contract
                      definition
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this FFI to the network
                  methods:
                    description: An array of smart contract method definitions
                    items:
                      description: An array of smart contract method definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this method is part of
                        description:
                          description: A description of the smart contract method
                          type: string
                        id:
                          description: The UUID of the FFI method definition
                        name:
                          description: The name of the method
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of method parameter/argument definitions
                          items:
                            description: An array of method parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this method within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple method overrides with the same name
                          type: string
                        returns:
                          description: An array of method return definitions
                          items:
                            description: An array of method return definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  name:
                    description: The name of the FFI - usually matching the smart
                      contract name
                    type: string
                  namespace:
                    description: The namespace of the FFI
                    type: string
                  version:
                    description: A version for the FFI - use of semantic versioning
                      such as 'v1.0.1' is encouraged
                    type: string
                type: object
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewContractInterface
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: A description of the smart contract this FFI represents
                  type: string
                events:
                  description: An array of smart contract event definitions
                  items:
                    description: An array of smart contract event definitions
                    properties:
                      contract:
                        description: The UUID of the FFI smart contract definition
                          that this event is part of
                      description:
                        description: A description of the smart contract event
                        type: string
                      id:
                        description: The UUID of the FFI event definition
                      name:
                        description: The name of the event
                        type: string
                      namespace:
                        description: The namespace of the FFI
                        type: string
                      params:
                        description: An array of event parameter/argument definitions
                        items:
                          description: An array of event parameter/argument definitions
                          properties:
                            name:
                              description: The name of the parameter. Note that parameters
                                must be ordered correctly on the FFI, according to
                                the order in the blockchain smart contract
                              type: string
                            schema:
                              description: FireFly uses an extended subset of JSON
                                Schema to describe parameters, similar to OpenAPI/Swagger.
                                Converters are available for native blockchain interface
                                definitions / type systems - such as an Ethereum ABI.
                                See the documentation for more detail
                              type: string
                          type: object
                        type: array
                      pathname:
                        description: The unique name allocated to this event within
                          the FFI for use on URL paths. Supports contracts that have
                          multiple event overrides with the same name
                        type: string
                    type: object
                  type: array
                methods:
                  description: An array of smart contract method definitions
                  items:
                    description: An array of smart contract method definitions
                    properties:
                      contract:
                        description: The UUID of the FFI smart contract definition
                          that this method is part of
                      description:
                        description: A description of the smart contract method
                        type: string
                      id:
                        description: The UUID of the FFI method definition
                      name:
                        description: The name of the method
                        type: string
                      namespace:
                        description: The namespace of the FFI
                        type: string
                      params:
                        description: An array of method parameter/argument definitions
                        items:
                          description: An array of method parameter/argument definitions
                          properties:
                            name:
                              description: The name of the parameter. Note that parameters
                                must be ordered correctly on the FFI, according to
                                the order in the blockchain smart contract
                              type: string
                            schema:
                              description: FireFly uses an extended subset of JSON
                                Schema to describe parameters, similar to OpenAPI/Swagger.
                                Converters are available for native blockchain interface
                                definitions / type systems - such as an Ethereum ABI.
                                See the documentation for more detail
                              type: string
                          type: object
                        type: array
                      pathname:
                        description: The unique name allocated to this method within
                          the FFI for use on URL paths. Supports contracts that have
                          multiple method overrides with the same name
                        type: string
                      returns:
                        description: An array of method return definitions
                        items:
                          description: An array of method return definitions
                          properties:
                            name:
                              description: The name of the parameter. Note that parameters
                                must be ordered correctly on the FFI, according to
                                the order in the blockchain smart contract
                              type: string
                            schema:
                              description: FireFly uses an extended subset of JSON
                                Schema to describe parameters, similar to OpenAPI/Swagger.
                                Converters are available for native blockchain interface
                                definitions / type systems - such as an Ethereum ABI.
                                See the documentation for more detail
                              type: string
                          type: object
                        type: array
                    type: object
                  type: array
                name:
                  description: The name of the FFI - usually matching the smart contract
                    name
                  type: string
                version:
                  description: A version for the FFI - use of semantic versioning
                    such as 'v1.0.1' is encouraged
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  description:
                    description: A description of the smart contract this FFI represents
                    type: string
                  events:
                    description: An array of smart contract event definitions
                    items:
                      description: An array of smart contract event definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this event is part of
                        description:
                          description: A description of the smart contract event
                          type: string
                        id:
                          description: The UUID of the FFI event definition
                        name:
                          description: The name of the event
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of event parameter/argument definitions
                          items:
                            description: An array of event parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this event within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple event overrides with the same name
                          type: string
                      type: object
                    type: array
                  id:
                    description: The UUID of the FireFly interface (FFI) smart contract
                      definition
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this FFI to the network
                  methods:
                    description: An array of smart contract method definitions
                    items:
                      description: An array of smart contract method definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this method is part of
                        description:
                          description: A description of the smart contract method
                          type: string
                        id:
                          description: The UUID of the FFI method definition
                        name:
                          description: The name of the method
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of method parameter/argument definitions
                          items:
                            description: An array of method parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this method within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple method overrides with the same name
                          type: string
                        returns:
                          description: An array of method return definitions
                          items:
                            description: An array of method return definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  name:
                    description: The name of the FFI - usually matching the smart
                      contract name
                    type: string
                  namespace:
                    description: The namespace of the FFI
                    type: string
                  version:
                    description: A version for the FFI - use of semantic versioning
                      such as 'v1.0.1' is encouraged
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/interfaces/{interfaceId}:
    get:
      description: 'TODO: Description'
      operationId: getContractInterface
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: query
        name: fetchchildren
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  description:
                    description: A description of the smart contract this FFI represents
                    type: string
                  events:
                    description: An array of smart contract event definitions
                    items:
                      description: An array of smart contract event definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this event is part of
                        description:
                          description: A description of the smart contract event
                          type: string
                        id:
                          description: The UUID of the FFI event definition
                        name:
                          description: The name of the event
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of event parameter/argument definitions
                          items:
                            description: An array of event parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this event within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple event overrides with the same name
                          type: string
                      type: object
                    type: array
                  id:
                    description: The UUID of the FireFly interface (FFI) smart contract
                      definition
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this FFI to the network
                  methods:
                    description: An array of smart contract method definitions
                    items:
                      description: An array of smart contract method definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this method is part of
                        description:
                          description: A description of the smart contract method
                          type: string
                        id:
                          description: The UUID of the FFI method definition
                        name:
                          description: The name of the method
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of method parameter/argument definitions
                          items:
                            description: An array of method parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this method within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple method overrides with the same name
                          type: string
                        returns:
                          description: An array of method return definitions
                          items:
                            description: An array of method return definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  name:
                    description: The name of the FFI - usually matching the smart
                      contract name
                    type: string
                  namespace:
                    description: The namespace of the FFI
                    type: string
                  version:
                    description: A version for the FFI - use of semantic versioning
                      such as 'v1.0.1' is encouraged
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/interfaces/{interfaceId}/invoke/{methodPath}:
    post:
      description: 'TODO: Description'
      operationId: postContractInterfaceInvoke
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: path
        name: methodPath
        required: true
        schema:
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                input:
                  additionalProperties:
                    description: A map of named inputs. The name and type of each
                      input must be compatible with the FFI description of the method,
                      so that FireFly knows how to serialize it to the blockchain
                      via the connector
                  description: A map of named inputs. The name and type of each input
                    must be compatible with the FFI description of the method, so
                    that FireFly knows how to serialize it to the blockchain via the
                    connector
                  type: object
                key:
                  description: The blockchain signing key that will sign the invocation.
                    Defaults to the first signing key of the organization that operates
                    the node
                  type: string
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
                method:
                  description: An in-line FFI method definition for the method to
                    invoke. Required when FFI is not specified
                  properties:
                    contract:
                      description: The UUID of the FFI smart contract definition that
                        this method is part of
                    description:
                      description: A description of the smart contract method
                      type: string
                    id:
                      description: The UUID of the FFI method definition
                    name:
                      description: The name of the method
                      type: string
                    namespace:
                      description: The namespace of the FFI
                      type: string
                    params:
                      description: An array of method parameter/argument definitions
                      items:
                        description: An array of method parameter/argument definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                    pathname:
                      description: The unique name allocated to this method within
                        the FFI for use on URL paths. Supports contracts that have
                        multiple method overrides with the same name
                      type: string
                    returns:
                      description: An array of method return definitions
                      items:
                        description: An array of method return definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the operation created to track the transaction
                      submission through to completion
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/interfaces/{interfaceId}/query/{methodPath}:
    post:
      description: 'TODO: Description'
      operationId: postContractInterfaceQuery
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: path
        name: methodPath
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                input:
                  additionalProperties:
                    description: A map of named inputs. The name and type of each
                      input must be compatible with the FFI description of the method,
                      so that FireFly knows how to serialize it to the blockchain
                      via the connector
                  description: A map of named inputs. The name and type of each input
                    must be compatible with the FFI description of the method, so
                    that FireFly knows how to serialize it to the blockchain via the
                    connector
                  type: object
                key:
                  description: The blockchain signing key that will sign the invocation.
                    Defaults to the first signing key of the organization that operates
                    the node
                  type: string
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
                method:
                  description: An in-line FFI method definition for the method to
                    invoke. Required when FFI is not specified
                  properties:
                    contract:
                      description: The UUID of the FFI smart contract definition that
                        this method is part of
                    description:
                      description: A description of the smart contract method
                      type: string
                    id:
                      description: The UUID of the FFI method definition
                    name:
                      description: The name of the method
                      type: string
                    namespace:
                      description: The namespace of the FFI
                      type: string
                    params:
                      description: An array of method parameter/argument definitions
                      items:
                        description: An array of method parameter/argument definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                    pathname:
                      description: The unique name allocated to this method within
                        the FFI for use on URL paths. Supports contracts that have
                        multiple method overrides with the same name
                      type: string
                    returns:
                      description: An array of method return definitions
                      items:
                        description: An array of method return definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/interfaces/{name}/{version}:
    get:
      description: 'TODO: Description'
      operationId: getContractInterfaceByNameAndVersion
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  description:
                    description: A description of the smart contract this FFI represents
                    type: string
                  events:
                    description: An array of smart contract event definitions
                    items:
                      description: An array of smart contract event definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this event is part of
                        description:
                          description: A description of the smart contract event
                          type: string
                        id:
                          description: The UUID of the FFI event definition
                        name:
                          description: The name of the event
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of event parameter/argument definitions
                          items:
                            description: An array of event parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this event within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple event overrides with the same name
                          type: string
                      type: object
                    type: array
                  id:
                    description: The UUID of the FireFly interface (FFI) smart contract
                      definition
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this FFI to the network
                  methods:
                    description: An array of smart contract method definitions
                    items:
                      description: An array of smart contract method definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this method is part of
                        description:
                          description: A description of the smart contract method
                          type: string
                        id:
                          description: The UUID of the FFI method definition
                        name:
                          description: The name of the method
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of method parameter/argument definitions
                          items:
                            description: An array of method parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this method within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple method overrides with the same name
                          type: string
                        returns:
                          description: An array of method return definitions
                          items:
                            description: An array of method return definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  name:
                    description: The name of the FFI - usually matching the smart
                      contract name
                    type: string
                  namespace:
                    description: The namespace of the FFI
                    type: string
                  version:
                    description: A version for the FFI - use of semantic versioning
                      such as 'v1.0.1' is encouraged
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/interfaces/generate:
    post:
      description: 'TODO: Description'
      operationId: postGenerateContractInterface
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: The description of the FFI to be generated. Defaults
                    to the description extracted by the blockchain specific converter
                    utility
                  type: string
                input:
                  description: A blockchain connector specific payload. For example
                    in Ethereum this is a JSON structure containing an 'abi' array,
                    and optionally a 'devdocs' array.
                  type: string
                name:
                  description: The name of the FFI to generate
                  type: string
                namespace:
                  description: The namespace into which the FFI will be generated
                  type: string
                version:
                  description: The version of the FFI to generate
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  description:
                    description: A description of the smart contract this FFI represents
                    type: string
                  events:
                    description: An array of smart contract event definitions
                    items:
                      description: An array of smart contract event definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this event is part of
                        description:
                          description: A description of the smart contract event
                          type: string
                        id:
                          description: The UUID of the FFI event definition
                        name:
                          description: The name of the event
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of event parameter/argument definitions
                          items:
                            description: An array of event parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this event within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple event overrides with the same name
                          type: string
                      type: object
                    type: array
                  id:
                    description: The UUID of the FireFly interface (FFI) smart contract
                      definition
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this FFI to the network
                  methods:
                    description: An array of smart contract method definitions
                    items:
                      description: An array of smart contract method definitions
                      properties:
                        contract:
                          description: The UUID of the FFI smart contract definition
                            that this method is part of
                        description:
                          description: A description of the smart contract method
                          type: string
                        id:
                          description: The UUID of the FFI method definition
                        name:
                          description: The name of the method
                          type: string
                        namespace:
                          description: The namespace of the FFI
                          type: string
                        params:
                          description: An array of method parameter/argument definitions
                          items:
                            description: An array of method parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                        pathname:
                          description: The unique name allocated to this method within
                            the FFI for use on URL paths. Supports contracts that
                            have multiple method overrides with the same name
                          type: string
                        returns:
                          description: An array of method return definitions
                          items:
                            description: An array of method return definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  name:
                    description: The name of the FFI - usually matching the smart
                      contract name
                    type: string
                  namespace:
                    description: The namespace of the FFI
                    type: string
                  version:
                    description: A version for the FFI - use of semantic versioning
                      such as 'v1.0.1' is encouraged
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/invoke:
    post:
      description: 'TODO: Description'
      operationId: postContractInvoke
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                input:
                  additionalProperties:
                    description: A map of named inputs. The name and type of each
                      input must be compatible with the FFI description of the method,
                      so that FireFly knows how to serialize it to the blockchain
                      via the connector
                  description: A map of named inputs. The name and type of each input
                    must be compatible with the FFI description of the method, so
                    that FireFly knows how to serialize it to the blockchain via the
                    connector
                  type: object
                interface:
                  description: The UUID of a method within a pre-configured FireFly
                    interface (FFI) definition for a smart contract. Required if the
                    'method' is omitted. Also see Contract APIs as a way to configure
                    a dedicated API for your FFI, including all methods and an OpenAPI/Swagger
                    interface
                key:
                  description: The blockchain signing key that will sign the invocation.
                    Defaults to the first signing key of the organization that operates
                    the node
                  type: string
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
                method:
                  description: An in-line FFI method definition for the method to
                    invoke. Required when FFI is not specified
                  properties:
                    contract:
                      description: The UUID of the FFI smart contract definition that
                        this method is part of
                    description:
                      description: A description of the smart contract method
                      type: string
                    id:
                      description: The UUID of the FFI method definition
                    name:
                      description: The name of the method
                      type: string
                    namespace:
                      description: The namespace of the FFI
                      type: string
                    params:
                      description: An array of method parameter/argument definitions
                      items:
                        description: An array of method parameter/argument definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                    pathname:
                      description: The unique name allocated to this method within
                        the FFI for use on URL paths. Supports contracts that have
                        multiple method overrides with the same name
                      type: string
                    returns:
                      description: An array of method return definitions
                      items:
                        description: An array of method return definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: The UUID of the operation created to track the transaction
                      submission through to completion
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/listeners:
    get:
      description: 'TODO: Description'
      operationId: getContractListeners
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: interface
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: protocolid
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The creation time of the listener
                    event:
                      description: The definition of the event, either provided in-line
                        when creating the listener, or extracted from the referenced
                        FFI
                      properties:
                        description:
                          description: A description of the smart contract event
                          type: string
                        name:
                          description: The name of the event
                          type: string
                        params:
                          description: An array of event parameter/argument definitions
                          items:
                            description: An array of event parameter/argument definitions
                            properties:
                              name:
                                description: The name of the parameter. Note that
                                  parameters must be ordered correctly on the FFI,
                                  according to the order in the blockchain smart contract
                                type: string
                              schema:
                                description: FireFly uses an extended subset of JSON
                                  Schema to describe parameters, similar to OpenAPI/Swagger.
                                  Converters are available for native blockchain interface
                                  definitions / type systems - such as an Ethereum
                                  ABI. See the documentation for more detail
                                type: string
                            type: object
                          type: array
                      type: object
                    id:
                      description: The UUID of the smart contract listener
                    interface:
                      description: A reference to an existing FFI, containing pre-registered
                        type information for the event
                      properties:
                        id:
                          description: The UUID of the FireFly interface
                        name:
                          description: The name of the FireFly interface
                          type: string
                        version:
                          description: The version of the FireFly interface
                          type: string
                      type: object
                    location:
                      description: A blockchain specific contract identifier. For
                        example an Ethereum contract address, or a Fabric chaincode
                        name and channel
                      type: string
                    name:
                      description: A descriptive name for the listener
                      type: string
                    namespace:
                      description: The namespace of the listener, which defines the
                        namespace of all blockchain events detected by this listener
                      type: string
                    options:
                      description: Options that control how the listener subscribes
                        to events from the underlying blockchain
                      properties:
                        firstEvent:
                          description: A blockchain specific string, such as a block
                            number, to start listening from. The special strings 'oldest'
                            and 'newest' are supported by all blockchain connectors.
                            Default is 'newest'
                          type: string
                      type: object
                    protocolId:
                      description: An ID assigned by the blockchain connector to this
                        listener
                      type: string
                    topic:
                      description: A topic to set on the FireFly event that is emitted
                        each time a blockchain event is detected from the blockchain.
                        Setting this topic on a number of listeners allows applications
                        to easily subscribe to all events they need
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewContractListener
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                event:
                  description: The definition of the event, either provided in-line
                    when creating the listener, or extracted from the referenced FFI
                  properties:
                    description:
                      description: A description of the smart contract event
                      type: string
                    name:
                      description: The name of the event
                      type: string
                    params:
                      description: An array of event parameter/argument definitions
                      items:
                        description: An array of event parameter/argument definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                  type: object
                eventId:
                  description: When creating a listener from an existing FFI, this
                    is the UUID of the event on that FFI that will be detected by
                    this listener
                interface:
                  description: A reference to an existing FFI, containing pre-registered
                    type information for the event
                  properties:
                    id:
                      description: The UUID of the FireFly interface
                    name:
                      description: The name of the FireFly interface
                      type: string
                    version:
                      description: The version of the FireFly interface
                      type: string
                  type: object
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
                name:
                  description: A descriptive name for the listener
                  type: string
                options:
                  description: Options that control how the listener subscribes to
                    events from the underlying blockchain
                  properties:
                    firstEvent:
                      description: A blockchain specific string, such as a block number,
                        to start listening from. The special strings 'oldest' and
                        'newest' are supported by all blockchain connectors. Default
                        is 'newest'
                      type: string
                  type: object
                topic:
                  description: A topic to set on the FireFly event that is emitted
                    each time a blockchain event is detected from the blockchain.
                    Setting this topic on a number of listeners allows applications
                    to easily subscribe to all events they need
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the listener
                  event:
                    description: The definition of the event, either provided in-line
                      when creating the listener, or extracted from the referenced
                      FFI
                    properties:
                      description:
                        description: A description of the smart contract event
                        type: string
                      name:
                        description: The name of the event
                        type: string
                      params:
                        description: An array of event parameter/argument definitions
                        items:
                          description: An array of event parameter/argument definitions
                          properties:
                            name:
                              description: The name of the parameter. Note that parameters
                                must be ordered correctly on the FFI, according to
                                the order in the blockchain smart contract
                              type: string
                            schema:
                              description: FireFly uses an extended subset of JSON
                                Schema to describe parameters, similar to OpenAPI/Swagger.
                                Converters are available for native blockchain interface
                                definitions / type systems - such as an Ethereum ABI.
                                See the documentation for more detail
                              type: string
                          type: object
                        type: array
                    type: object
                  id:
                    description: The UUID of the smart contract listener
                  interface:
                    description: A reference to an existing FFI, containing pre-registered
                      type information for the event
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: A blockchain specific contract identifier. For example
                      an Ethereum contract address, or a Fabric chaincode name and
                      channel
                    type: string
                  name:
                    description: A descriptive name for the listener
                    type: string
                  namespace:
                    description: The namespace of the listener, which defines the
                      namespace of all blockchain events detected by this listener
                    type: string
                  options:
                    description: Options that control how the listener subscribes
                      to events from the underlying blockchain
                    properties:
                      firstEvent:
                        description: A blockchain specific string, such as a block
                          number, to start listening from. The special strings 'oldest'
                          and 'newest' are supported by all blockchain connectors.
                          Default is 'newest'
                        type: string
                    type: object
                  protocolId:
                    description: An ID assigned by the blockchain connector to this
                      listener
                    type: string
                  topic:
                    description: A topic to set on the FireFly event that is emitted
                      each time a blockchain event is detected from the blockchain.
                      Setting this topic on a number of listeners allows applications
                      to easily subscribe to all events they need
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/listeners/{nameOrId}:
    delete:
      description: 'TODO: Description'
      operationId: deleteContractListener
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "204":
          content:
            application/json: {}
          description: Success
        default:
          description: ""
    get:
      description: 'TODO: Description'
      operationId: getContractListenerByNameOrID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the listener
                  event:
                    description: The definition of the event, either provided in-line
                      when creating the listener, or extracted from the referenced
                      FFI
                    properties:
                      description:
                        description: A description of the smart contract event
                        type: string
                      name:
                        description: The name of the event
                        type: string
                      params:
                        description: An array of event parameter/argument definitions
                        items:
                          description: An array of event parameter/argument definitions
                          properties:
                            name:
                              description: The name of the parameter. Note that parameters
                                must be ordered correctly on the FFI, according to
                                the order in the blockchain smart contract
                              type: string
                            schema:
                              description: FireFly uses an extended subset of JSON
                                Schema to describe parameters, similar to OpenAPI/Swagger.
                                Converters are available for native blockchain interface
                                definitions / type systems - such as an Ethereum ABI.
                                See the documentation for more detail
                              type: string
                          type: object
                        type: array
                    type: object
                  id:
                    description: The UUID of the smart contract listener
                  interface:
                    description: A reference to an existing FFI, containing pre-registered
                      type information for the event
                    properties:
                      id:
                        description: The UUID of the FireFly interface
                      name:
                        description: The name of the FireFly interface
                        type: string
                      version:
                        description: The version of the FireFly interface
                        type: string
                    type: object
                  location:
                    description: A blockchain specific contract identifier. For example
                      an Ethereum contract address, or a Fabric chaincode name and
                      channel
                    type: string
                  name:
                    description: A descriptive name for the listener
                    type: string
                  namespace:
                    description: The namespace of the listener, which defines the
                      namespace of all blockchain events detected by this listener
                    type: string
                  options:
                    description: Options that control how the listener subscribes
                      to events from the underlying blockchain
                    properties:
                      firstEvent:
                        description: A blockchain specific string, such as a block
                          number, to start listening from. The special strings 'oldest'
                          and 'newest' are supported by all blockchain connectors.
                          Default is 'newest'
                        type: string
                    type: object
                  protocolId:
                    description: An ID assigned by the blockchain connector to this
                      listener
                    type: string
                  topic:
                    description: A topic to set on the FireFly event that is emitted
                      each time a blockchain event is detected from the blockchain.
                      Setting this topic on a number of listeners allows applications
                      to easily subscribe to all events they need
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/contracts/query:
    post:
      description: 'TODO: Description'
      operationId: postContractQuery
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                input:
                  additionalProperties:
                    description: A map of named inputs. The name and type of each
                      input must be compatible with the FFI description of the method,
                      so that FireFly knows how to serialize it to the blockchain
                      via the connector
                  description: A map of named inputs. The name and type of each input
                    must be compatible with the FFI description of the method, so
                    that FireFly knows how to serialize it to the blockchain via the
                    connector
                  type: object
                interface:
                  description: The UUID of a method within a pre-configured FireFly
                    interface (FFI) definition for a smart contract. Required if the
                    'method' is omitted. Also see Contract APIs as a way to configure
                    a dedicated API for your FFI, including all methods and an OpenAPI/Swagger
                    interface
                key:
                  description: The blockchain signing key that will sign the invocation.
                    Defaults to the first signing key of the organization that operates
                    the node
                  type: string
                location:
                  description: A blockchain specific contract identifier. For example
                    an Ethereum contract address, or a Fabric chaincode name and channel
                  type: string
                method:
                  description: An in-line FFI method definition for the method to
                    invoke. Required when FFI is not specified
                  properties:
                    contract:
                      description: The UUID of the FFI smart contract definition that
                        this method is part of
                    description:
                      description: A description of the smart contract method
                      type: string
                    id:
                      description: The UUID of the FFI method definition
                    name:
                      description: The name of the method
                      type: string
                    namespace:
                      description: The namespace of the FFI
                      type: string
                    params:
                      description: An array of method parameter/argument definitions
                      items:
                        description: An array of method parameter/argument definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                    pathname:
                      description: The unique name allocated to this method within
                        the FFI for use on URL paths. Supports contracts that have
                        multiple method overrides with the same name
                      type: string
                    returns:
                      description: An array of method return definitions
                      items:
                        description: An array of method return definitions
                        properties:
                          name:
                            description: The name of the parameter. Note that parameters
                              must be ordered correctly on the FFI, according to the
                              order in the blockchain smart contract
                            type: string
                          schema:
                            description: FireFly uses an extended subset of JSON Schema
                              to describe parameters, similar to OpenAPI/Swagger.
                              Converters are available for native blockchain interface
                              definitions / type systems - such as an Ethereum ABI.
                              See the documentation for more detail
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/data:
    get:
      description: 'TODO: Description'
      operationId: getData
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blob.hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blob.name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blob.public
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blob.size
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: datatype.name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: datatype.version
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: validator
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: value
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    blob:
                      description: An optional hash reference to a binary blob attachment
                      properties:
                        hash:
                          description: The hash of the binary blob data
                        name:
                          description: The name field from the metadata attached to
                            the blob, commonly used as a path/filename, and indexed
                            for search
                          type: string
                        public:
                          description: If this data has been published to shared storage,
                            this field is the id of the data in the shared storage
                            plugin (IPFS hash etc.)
                          type: string
                        size:
                          description: The size of the binary data
                          format: int64
                          type: integer
                      type: object
                    created:
                      description: The creation time of the data resource
                    datatype:
                      description: The optional datatype to use of validation of this
                        data
                      properties:
                        name:
                          description: The name of the datatype
                          type: string
                        version:
                          description: The version of the datatype. Semantic versioning
                            is encouraged, such as v1.0.1
                          type: string
                      type: object
                    hash:
                      description: The hash of the data resource. Derived from the
                        value and the hash of any binary blob attachment
                    id:
                      description: The UUID of the data resource
                    namespace:
                      description: The namespace of the data resource
                      type: string
                    validator:
                      description: The data validator type
                      type: string
                    value:
                      description: The value for the data, stored in the FireFly core
                        database. Can be any JSON type - object, array, string, number
                        or boolean. Can be combined with a binary blob attachment
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postData
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                blob:
                  description: An optional in-line hash reference to a previously
                    uploaded binary data blob
                  properties:
                    hash:
                      description: The hash of the binary blob data
                    name:
                      description: The name field from the metadata attached to the
                        blob, commonly used as a path/filename, and indexed for search
                      type: string
                    public:
                      description: If this data has been published to shared storage,
                        this field is the id of the data in the shared storage plugin
                        (IPFS hash etc.)
                      type: string
                    size:
                      description: The size of the binary data
                      format: int64
                      type: integer
                  type: object
                datatype:
                  description: The optional datatype to use for validation of the
                    in-line data
                  properties:
                    name:
                      description: The name of the datatype
                      type: string
                    version:
                      description: The version of the datatype. Semantic versioning
                        is encouraged, such as v1.0.1
                      type: string
                  type: object
                hash:
                  description: The hash of the referenced data
                id:
                  description: The UUID of the referenced data resource
                validator:
                  description: The data validator type to use for in-line data
                  type: string
                value:
                  description: The in-line value for the data. Can be any JSON type
                    - object, array, string, number or boolean
                  type: string
              type: object
          multipart/form-data:
            schema:
              properties:
                autometa:
                  description: Success
                  type: string
                datatype.name:
                  description: Success
                  type: string
                datatype.version:
                  description: Success
                  type: string
                filename.ext:
                  format: binary
                  type: string
                metadata:
                  description: Success
                  type: string
                validator:
                  description: Success
                  type: string
              type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  blob:
                    description: An optional hash reference to a binary blob attachment
                    properties:
                      hash:
                        description: The hash of the binary blob data
                      name:
                        description: The name field from the metadata attached to
                          the blob, commonly used as a path/filename, and indexed
                          for search
                        type: string
                      public:
                        description: If this data has been published to shared storage,
                          this field is the id of the data in the shared storage plugin
                          (IPFS hash etc.)
                        type: string
                      size:
                        description: The size of the binary data
                        format: int64
                        type: integer
                    type: object
                  created:
                    description: The creation time of the data resource
                  datatype:
                    description: The optional datatype to use of validation of this
                      data
                    properties:
                      name:
                        description: The name of the datatype
                        type: string
                      version:
                        description: The version of the datatype. Semantic versioning
                          is encouraged, such as v1.0.1
                        type: string
                    type: object
                  hash:
                    description: The hash of the data resource. Derived from the value
                      and the hash of any binary blob attachment
                  id:
                    description: The UUID of the data resource
                  namespace:
                    description: The namespace of the data resource
                    type: string
                  validator:
                    description: The data validator type
                    type: string
                  value:
                    description: The value for the data, stored in the FireFly core
                      database. Can be any JSON type - object, array, string, number
                      or boolean. Can be combined with a binary blob attachment
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/data/{dataid}:
    get:
      description: 'TODO: Description'
      operationId: getDataByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: dataid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  blob:
                    description: An optional hash reference to a binary blob attachment
                    properties:
                      hash:
                        description: The hash of the binary blob data
                      name:
                        description: The name field from the metadata attached to
                          the blob, commonly used as a path/filename, and indexed
                          for search
                        type: string
                      public:
                        description: If this data has been published to shared storage,
                          this field is the id of the data in the shared storage plugin
                          (IPFS hash etc.)
                        type: string
                      size:
                        description: The size of the binary data
                        format: int64
                        type: integer
                    type: object
                  created:
                    description: The creation time of the data resource
                  datatype:
                    description: The optional datatype to use of validation of this
                      data
                    properties:
                      name:
                        description: The name of the datatype
                        type: string
                      version:
                        description: The version of the datatype. Semantic versioning
                          is encouraged, such as v1.0.1
                        type: string
                    type: object
                  hash:
                    description: The hash of the data resource. Derived from the value
                      and the hash of any binary blob attachment
                  id:
                    description: The UUID of the data resource
                  namespace:
                    description: The namespace of the data resource
                    type: string
                  validator:
                    description: The data validator type
                    type: string
                  value:
                    description: The value for the data, stored in the FireFly core
                      database. Can be any JSON type - object, array, string, number
                      or boolean. Can be combined with a binary blob attachment
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/data/{dataid}/blob:
    get:
      description: 'TODO: Description'
      operationId: getDataBlob
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: dataid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: author
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: batch
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: cid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: confirmed
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: group
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: pins
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: sequence
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: state
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tag
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: topics
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: txtype
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: byte
                type: string
          description: Success
        default:
          description: ""
  /namespaces/{ns}/data/{dataid}/messages:
    get:
      description: 'TODO: Description'
      operationId: getDataMsgs
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: dataid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: author
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: batch
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: cid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: confirmed
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: group
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: pins
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: sequence
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: state
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tag
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: topics
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: txtype
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  batch:
                    description: The UUID of the batch in which the message was pinned/transferred
                  confirmed:
                    description: The timestamp of when the message was confirmed/rejected
                  data:
                    description: The list of data elements attached to the message
                    items:
                      description: The list of data elements attached to the message
                      properties:
                        hash:
                          description: The hash of the referenced data
                        id:
                          description: The UUID of the referenced data resource
                      type: object
                    type: array
                  hash:
                    description: The hash of the message. Derived from the header,
                      which includes the data hash
                  header:
                    description: The message header contains all fields that are used
                      to build the message hash
                    properties:
                      author:
                        description: The DID of identity of the submitter
                        type: string
                      cid:
                        description: The correlation ID of the message. Set this when
                          a message is a response to another message
                      created:
                        description: The creation time of the message
                      datahash:
                        description: A single hash representing all data in the message.
                          Derived from the array of data ids+hashes attached to this
                          message
                      group:
                        description: Private messages only - the identifier hash of
                          the privacy group. Derived from the name and member list
                          of the group
                      id:
                        description: The UUID of the message. Unique to each message
                      key:
                        description: The on-chain signing key used to sign the transaction
                        type: string
                      namespace:
                        description: The namespace of the message
                        type: string
                      tag:
                        description: The message tag indicates the purpose of the
                          message to the applications that process it
                        type: string
                      topics:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        items:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          type: string
                        type: array
                      txtype:
                        description: The type of transaction used to order/deliver
                          this message
                        type: string
                      type:
                        description: The type of the message
                        enum:
                        - definition
                        - broadcast
                        - private
                        - groupinit
                        - transfer_broadcast
                        - transfer_private
                        type: string
                    type: object
                  pins:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    items:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      type: string
                    type: array
                  state:
                    description: The current state of the message
                    enum:
                    - staged
                    - ready
                    - sent
                    - pending
                    - confirmed
                    - rejected
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/datatypes:
    get:
      description: 'TODO: Description'
      operationId: getDatatypes
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: message
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: validator
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: version
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The time the datatype was created
                    hash:
                      description: The hash of the value, such as the JSON schema.
                        Allows all parties to be confident they have the exact same
                        rules for verifying data created against a datatype
                    id:
                      description: The UUID of the datatype
                    message:
                      description: The UUID of the broadcast message that was used
                        to publish this datatype to the network
                    name:
                      description: The name of the datatype
                      type: string
                    namespace:
                      description: The namespace of the datatype. Data resources can
                        only be created referencing datatypes in the same namespace
                      type: string
                    validator:
                      description: The validator that should be used to verify this
                        datatype
                      enum:
                      - json
                      - none
                      - definition
                      type: string
                    value:
                      description: The definition of the datatype, in the syntax supported
                        by the validator (such as a JSON Schema definition)
                      type: string
                    version:
                      description: The version of the datatype. Multiple versions
                        can exist with the same name. Use of semantic versioning is
                        encourages, such as v1.0.1
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewDatatype
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the datatype
                  type: string
                validator:
                  description: The validator that should be used to verify this datatype
                  enum:
                  - json
                  - none
                  - definition
                  type: string
                value:
                  description: The definition of the datatype, in the syntax supported
                    by the validator (such as a JSON Schema definition)
                  type: string
                version:
                  description: The version of the datatype. Multiple versions can
                    exist with the same name. Use of semantic versioning is encourages,
                    such as v1.0.1
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the datatype was created
                  hash:
                    description: The hash of the value, such as the JSON schema. Allows
                      all parties to be confident they have the exact same rules for
                      verifying data created against a datatype
                  id:
                    description: The UUID of the datatype
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this datatype to the network
                  name:
                    description: The name of the datatype
                    type: string
                  namespace:
                    description: The namespace of the datatype. Data resources can
                      only be created referencing datatypes in the same namespace
                    type: string
                  validator:
                    description: The validator that should be used to verify this
                      datatype
                    enum:
                    - json
                    - none
                    - definition
                    type: string
                  value:
                    description: The definition of the datatype, in the syntax supported
                      by the validator (such as a JSON Schema definition)
                    type: string
                  version:
                    description: The version of the datatype. Multiple versions can
                      exist with the same name. Use of semantic versioning is encourages,
                      such as v1.0.1
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the datatype was created
                  hash:
                    description: The hash of the value, such as the JSON schema. Allows
                      all parties to be confident they have the exact same rules for
                      verifying data created against a datatype
                  id:
                    description: The UUID of the datatype
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this datatype to the network
                  name:
                    description: The name of the datatype
                    type: string
                  namespace:
                    description: The namespace of the datatype. Data resources can
                      only be created referencing datatypes in the same namespace
                    type: string
                  validator:
                    description: The validator that should be used to verify this
                      datatype
                    enum:
                    - json
                    - none
                    - definition
                    type: string
                  value:
                    description: The definition of the datatype, in the syntax supported
                      by the validator (such as a JSON Schema definition)
                    type: string
                  version:
                    description: The version of the datatype. Multiple versions can
                      exist with the same name. Use of semantic versioning is encourages,
                      such as v1.0.1
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/datatypes/{name}/{version}:
    get:
      description: 'TODO: Description'
      operationId: getDatatypeByName
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the datatype was created
                  hash:
                    description: The hash of the value, such as the JSON schema. Allows
                      all parties to be confident they have the exact same rules for
                      verifying data created against a datatype
                  id:
                    description: The UUID of the datatype
                  message:
                    description: The UUID of the broadcast message that was used to
                      publish this datatype to the network
                  name:
                    description: The name of the datatype
                    type: string
                  namespace:
                    description: The namespace of the datatype. Data resources can
                      only be created referencing datatypes in the same namespace
                    type: string
                  validator:
                    description: The validator that should be used to verify this
                      datatype
                    enum:
                    - json
                    - none
                    - definition
                    type: string
                  value:
                    description: The definition of the datatype, in the syntax supported
                      by the validator (such as a JSON Schema definition)
                    type: string
                  version:
                    description: The version of the datatype. Multiple versions can
                      exist with the same name. Use of semantic versioning is encourages,
                      such as v1.0.1
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/events:
    get:
      description: 'TODO: Description'
      operationId: getEvents
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: query
        name: fetchreferences
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: correlator
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: reference
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: sequence
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: topic
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    correlator:
                      description: For message events, this is the 'header.cid' field
                        from the referenced message. For certain other event types,
                        a secondary object is referenced such as a token pool
                    created:
                      description: The time the event was emitted. Not guaranteed
                        to be unique, or to increase between events in the same order
                        as the final sequence events are delivered to your application.
                        As such, the 'sequence' field should be used instead of the
                        'created' field for querying events in the exact order they
                        are delivered to applications
                    id:
                      description: The UUID assigned to this event by your local FireFly
                        node
                    namespace:
                      description: The namespace of the event. Your application must
                        subscribe to events within a namespace
                      type: string
                    reference:
                      description: The UUID of an resource that is the subject of
                        this event. The event type determines what type of resource
                        is referenced, and whether this field might be unset
                    sequence:
                      description: A sequence indicating the order in which events
                        are delivered to your application. Assure to be unique per
                        event in your local FireFly database (unlike the created timestamp)
                      format: int64
                      type: integer
                    topic:
                      description: A stream of information this event relates to.
                        For message confirmation events, a separate event is emitted
                        for each topic in the message. For blockchain events, the
                        listener specifies the topic. Rules exist for how the topic
                        is set for other event types
                      type: string
                    tx:
                      description: The UUID of a transaction that is event is part
                        of. Not all events are part of a transaction
                    type:
                      description: All interesting activity in FireFly is emitted
                        as a FireFly event, of a given type. The 'type' combined with
                        the 'reference' can be used to determine how to process the
                        event within your application
                      enum:
                      - transaction_submitted
                      - message_confirmed
                      - message_rejected
                      - namespace_confirmed
                      - datatype_confirmed
                      - identity_confirmed
                      - identity_updated
                      - token_pool_confirmed
                      - token_transfer_confirmed
                      - token_transfer_op_failed
                      - token_approval_confirmed
                      - token_approval_op_failed
                      - contract_interface_confirmed
                      - contract_api_confirmed
                      - blockchain_event_received
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/events/{eid}:
    get:
      description: 'TODO: Description'
      operationId: getEventByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: eid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  correlator:
                    description: For message events, this is the 'header.cid' field
                      from the referenced message. For certain other event types,
                      a secondary object is referenced such as a token pool
                  created:
                    description: The time the event was emitted. Not guaranteed to
                      be unique, or to increase between events in the same order as
                      the final sequence events are delivered to your application.
                      As such, the 'sequence' field should be used instead of the
                      'created' field for querying events in the exact order they
                      are delivered to applications
                  id:
                    description: The UUID assigned to this event by your local FireFly
                      node
                  namespace:
                    description: The namespace of the event. Your application must
                      subscribe to events within a namespace
                    type: string
                  reference:
                    description: The UUID of an resource that is the subject of this
                      event. The event type determines what type of resource is referenced,
                      and whether this field might be unset
                  sequence:
                    description: A sequence indicating the order in which events are
                      delivered to your application. Assure to be unique per event
                      in your local FireFly database (unlike the created timestamp)
                    format: int64
                    type: integer
                  topic:
                    description: A stream of information this event relates to. For
                      message confirmation events, a separate event is emitted for
                      each topic in the message. For blockchain events, the listener
                      specifies the topic. Rules exist for how the topic is set for
                      other event types
                    type: string
                  tx:
                    description: The UUID of a transaction that is event is part of.
                      Not all events are part of a transaction
                  type:
                    description: All interesting activity in FireFly is emitted as
                      a FireFly event, of a given type. The 'type' combined with the
                      'reference' can be used to determine how to process the event
                      within your application
                    enum:
                    - transaction_submitted
                    - message_confirmed
                    - message_rejected
                    - namespace_confirmed
                    - datatype_confirmed
                    - identity_confirmed
                    - identity_updated
                    - token_pool_confirmed
                    - token_transfer_confirmed
                    - token_transfer_op_failed
                    - token_approval_confirmed
                    - token_approval_op_failed
                    - contract_interface_confirmed
                    - contract_api_confirmed
                    - blockchain_event_received
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/groups:
    get:
      description: 'TODO: Description'
      operationId: getGroups
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: description
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: ledger
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: message
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The time when the group was first used to send
                        a message in the network
                    hash:
                      description: The identifier hash of this group. Derived from
                        the name and group members
                    members:
                      description: The list of members in this privacy group
                      items:
                        description: The list of members in this privacy group
                        properties:
                          identity:
                            description: The DID of the group member
                            type: string
                          node:
                            description: The UUID of the node that receives a copy
                              of the off-chain message for the identity
                        type: object
                      type: array
                    message:
                      description: The message used to broadcast this group privately
                        to the members
                    name:
                      description: The optional name of the group, allowing multiple
                        unique groups to exist with the same list of recipients
                      type: string
                    namespace:
                      description: The namespace of the group
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/groups/{groupid}:
    get:
      description: 'TODO: Description'
      operationId: getGroupByHash
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: groupid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time when the group was first used to send a
                      message in the network
                  hash:
                    description: The identifier hash of this group. Derived from the
                      name and group members
                  members:
                    description: The list of members in this privacy group
                    items:
                      description: The list of members in this privacy group
                      properties:
                        identity:
                          description: The DID of the group member
                          type: string
                        node:
                          description: The UUID of the node that receives a copy of
                            the off-chain message for the identity
                      type: object
                    type: array
                  message:
                    description: The message used to broadcast this group privately
                      to the members
                  name:
                    description: The optional name of the group, allowing multiple
                      unique groups to exist with the same list of recipients
                    type: string
                  namespace:
                    description: The namespace of the group
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/identities:
    get:
      description: 'TODO: Description'
      operationId: getIdentities
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: query
        name: fetchverifiers
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: description
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: did
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.claim
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.update
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.verification
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: parent
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: profile
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The creation time of the identity
                    description:
                      description: A description of the identity. Part of the updatable
                        profile information of an identity
                      type: string
                    did:
                      description: The DID of the identity. Unique across namespaces
                        within a FireFly network
                      type: string
                    id:
                      description: The UUID of the identity
                    messages:
                      description: References to the broadcast messages that established
                        this identity and proved ownership of the associated verifiers
                        (keys)
                      properties:
                        claim:
                          description: The UUID of claim message
                        update:
                          description: The UUID of the most recently applied update
                            message. Unset if no updates have been confirmed
                        verification:
                          description: The UUID of claim message. Unset for root organization
                            identities
                      type: object
                    name:
                      description: The name of the identity. The name must be unique
                        within the type and namespace
                      type: string
                    namespace:
                      description: The namespace of the identity. Organization and
                        node identities are always defined in the ff_system namespace
                      type: string
                    parent:
                      description: The UUID of the parent identity. Unset for root
                        organization identities
                    profile:
                      additionalProperties:
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                      type: object
                    type:
                      description: The type of the identity
                      enum:
                      - org
                      - node
                      - custom
                      type: string
                    updated:
                      description: The last update time of the identity profile
                    verifiers:
                      description: The verifiers, such as blockchain signing keys,
                        that have been bound to this identity and can be used to prove
                        data orignates from that identity
                      items:
                        description: The verifiers, such as blockchain signing keys,
                          that have been bound to this identity and can be used to
                          prove data orignates from that identity
                        properties:
                          type:
                            description: The type of the verifier
                            enum:
                            - ethereum_address
                            - fabric_msp_id
                            - dx_peer_id
                            type: string
                          value:
                            description: The verifier string, such as an Ethereum
                              address, or Fabric MSP identifier
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewIdentity
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: A description of the identity. Part of the updatable
                    profile information of an identity
                  type: string
                key:
                  description: The blockchain signing key to use to make the claim
                    to the identity. Must be available to the local node to sign the
                    identity claim. Will become a verifier on the established identity
                  type: string
                name:
                  description: The name of the identity. The name must be unique within
                    the type and namespace
                  type: string
                parent:
                  description: On input the parent can be specified directly as the
                    UUID of and existing identity, or as a DID to resolve to that
                    identity, or an organization name. The parent must already have
                    been registered, and its blockchain signing key must be available
                    to the local node to sign the verification
                  type: string
                profile:
                  additionalProperties:
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                  description: A set of metadata for the identity. Part of the updatable
                    profile information of an identity
                  type: object
                type:
                  description: The type of the identity
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/identities/{iid}:
    get:
      description: 'TODO: Description'
      operationId: getIdentityByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: iid
        required: true
        schema:
          example: id
          type: string
      - description: 'TODO: Description'
        in: query
        name: fetchverifiers
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/identities/{iid}/did:
    get:
      description: 'TODO: Description'
      operationId: getIdentityDID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: iid
        required: true
        schema:
          example: id
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    description: See https://www.w3.org/TR/did-core/#json-ld
                    items:
                      description: See https://www.w3.org/TR/did-core/#json-ld
                      type: string
                    type: array
                  authentication:
                    description: See https://www.w3.org/TR/did-core/#did-document-properties
                    items:
                      description: See https://www.w3.org/TR/did-core/#did-document-properties
                      type: string
                    type: array
                  id:
                    description: See https://www.w3.org/TR/did-core/#did-document-properties
                    type: string
                  verificationMethod:
                    description: See https://www.w3.org/TR/did-core/#did-document-properties
                    items:
                      description: See https://www.w3.org/TR/did-core/#did-document-properties
                      properties:
                        blockchainAcountId:
                          description: For blockchains like Ethereum that represent
                            signing identities directly by their public key summarized
                            in an account string
                          type: string
                        controller:
                          description: See https://www.w3.org/TR/did-core/#service-properties
                          type: string
                        dataExchangePeerID:
                          description: A string provided by your Data Exchange plugin,
                            that it uses a technology specific mechanism to validate
                            against when messages arrive from this identity
                          type: string
                        id:
                          description: See https://www.w3.org/TR/did-core/#service-properties
                          type: string
                        mspIdentityString:
                          description: For Hyperledger Fabric where the signing identity
                            is represented by an MSP identifier (containing X509 certificate
                            DN strings) that were validated by your local MSP
                          type: string
                        type:
                          description: See https://www.w3.org/TR/did-core/#service-properties
                          type: string
                      type: object
                    type: array
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/identities/{iid}/verifiers:
    get:
      description: 'TODO: Description'
      operationId: getIdentityVerifiers
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: iid
        required: true
        schema:
          example: id
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: identity
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: value
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The time this verifier was created on this node
                    hash:
                      description: Hash used as a globally consistent identifier for
                        this namespace + type + value combination on every node in
                        the network
                    identity:
                      description: The UUID of the parent identity that has claimed
                        this verifier
                    namespace:
                      description: The namespace of the verifier
                      type: string
                    type:
                      description: The type of the verifier
                      enum:
                      - ethereum_address
                      - fabric_msp_id
                      - dx_peer_id
                      type: string
                    value:
                      description: The verifier string, such as an Ethereum address,
                        or Fabric MSP identifier
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages:
    get:
      description: 'TODO: Description'
      operationId: getMsgs
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Fetch the data and include it in the messages returned
        in: query
        name: fetchdata
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: author
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: batch
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: cid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: confirmed
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: group
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: pins
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: sequence
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: state
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tag
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: topics
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: txtype
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    batch:
                      description: The UUID of the batch in which the message was
                        pinned/transferred
                    confirmed:
                      description: The timestamp of when the message was confirmed/rejected
                    data:
                      description: The list of data elements attached to the message
                      items:
                        description: The list of data elements attached to the message
                        properties:
                          hash:
                            description: The hash of the referenced data
                          id:
                            description: The UUID of the referenced data resource
                        type: object
                      type: array
                    hash:
                      description: The hash of the message. Derived from the header,
                        which includes the data hash
                    header:
                      description: The message header contains all fields that are
                        used to build the message hash
                      properties:
                        author:
                          description: The DID of identity of the submitter
                          type: string
                        cid:
                          description: The correlation ID of the message. Set this
                            when a message is a response to another message
                        created:
                          description: The creation time of the message
                        datahash:
                          description: A single hash representing all data in the
                            message. Derived from the array of data ids+hashes attached
                            to this message
                        group:
                          description: Private messages only - the identifier hash
                            of the privacy group. Derived from the name and member
                            list of the group
                        id:
                          description: The UUID of the message. Unique to each message
                        key:
                          description: The on-chain signing key used to sign the transaction
                          type: string
                        namespace:
                          description: The namespace of the message
                          type: string
                        tag:
                          description: The message tag indicates the purpose of the
                            message to the applications that process it
                          type: string
                        topics:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          items:
                            description: A message topic associates this message with
                              an ordered stream of data. A custom topic should be
                              assigned - using the default topic is discouraged
                            type: string
                          type: array
                        txtype:
                          description: The type of transaction used to order/deliver
                            this message
                          type: string
                        type:
                          description: The type of the message
                          enum:
                          - definition
                          - broadcast
                          - private
                          - groupinit
                          - transfer_broadcast
                          - transfer_private
                          type: string
                      type: object
                    pins:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      items:
                        description: For private messages, a unique pin hash:nonce
                          is assigned for each topic
                        type: string
                      type: array
                    state:
                      description: The current state of the message
                      enum:
                      - staged
                      - ready
                      - sent
                      - pending
                      - confirmed
                      - rejected
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages/{msgid}:
    get:
      description: 'TODO: Description'
      operationId: getMsgByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: msgid
        required: true
        schema:
          type: string
      - description: Fetch the data and include it in the messages returned
        in: query
        name: fetchdata
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  batch:
                    description: The UUID of the batch in which the message was pinned/transferred
                  confirmed:
                    description: The timestamp of when the message was confirmed/rejected
                  data:
                    description: The list of data elements attached to the message
                    items:
                      description: The list of data elements attached to the message
                      properties:
                        hash:
                          description: The hash of the referenced data
                        id:
                          description: The UUID of the referenced data resource
                      type: object
                    type: array
                  group:
                    description: Allows you to specify details of the private group
                      of recipients in-line in the message. Alternative to using the
                      header.group to specify the hash of a group that has been previously
                      resolved
                    properties:
                      members:
                        description: An array of members of the group. If no identities
                          local to the sending node are included, then the organization
                          owner of the local node is added automatically
                        items:
                          description: An array of members of the group. If no identities
                            local to the sending node are included, then the organization
                            owner of the local node is added automatically
                          properties:
                            identity:
                              description: The DID of the group member. On input can
                                be a UUID or org name, and will be resolved to a DID
                              type: string
                            node:
                              description: The UUID of the node that will receive
                                a copy of the off-chain message for the identity.
                                The first applicable node for the identity will be
                                picked automatically on input if not specified
                              type: string
                          type: object
                        type: array
                      name:
                        description: Optional name for the group. Allows you to have
                          multiple separate groups with the same list of participants
                        type: string
                    type: object
                  hash:
                    description: The hash of the message. Derived from the header,
                      which includes the data hash
                  header:
                    description: The message header contains all fields that are used
                      to build the message hash
                    properties:
                      author:
                        description: The DID of identity of the submitter
                        type: string
                      cid:
                        description: The correlation ID of the message. Set this when
                          a message is a response to another message
                      created:
                        description: The creation time of the message
                      datahash:
                        description: A single hash representing all data in the message.
                          Derived from the array of data ids+hashes attached to this
                          message
                      group:
                        description: Private messages only - the identifier hash of
                          the privacy group. Derived from the name and member list
                          of the group
                      id:
                        description: The UUID of the message. Unique to each message
                      key:
                        description: The on-chain signing key used to sign the transaction
                        type: string
                      namespace:
                        description: The namespace of the message
                        type: string
                      tag:
                        description: The message tag indicates the purpose of the
                          message to the applications that process it
                        type: string
                      topics:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        items:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          type: string
                        type: array
                      txtype:
                        description: The type of transaction used to order/deliver
                          this message
                        type: string
                      type:
                        description: The type of the message
                        enum:
                        - definition
                        - broadcast
                        - private
                        - groupinit
                        - transfer_broadcast
                        - transfer_private
                        type: string
                    type: object
                  pins:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    items:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      type: string
                    type: array
                  state:
                    description: The current state of the message
                    enum:
                    - staged
                    - ready
                    - sent
                    - pending
                    - confirmed
                    - rejected
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages/{msgid}/data:
    get:
      description: 'TODO: Description'
      operationId: getMsgData
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: msgid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    blob:
                      description: An optional hash reference to a binary blob attachment
                      properties:
                        hash:
                          description: The hash of the binary blob data
                        name:
                          description: The name field from the metadata attached to
                            the blob, commonly used as a path/filename, and indexed
                            for search
                          type: string
                        public:
                          description: If this data has been published to shared storage,
                            this field is the id of the data in the shared storage
                            plugin (IPFS hash etc.)
                          type: string
                        size:
                          description: The size of the binary data
                          format: int64
                          type: integer
                      type: object
                    created:
                      description: The creation time of the data resource
                    datatype:
                      description: The optional datatype to use of validation of this
                        data
                      properties:
                        name:
                          description: The name of the datatype
                          type: string
                        version:
                          description: The version of the datatype. Semantic versioning
                            is encouraged, such as v1.0.1
                          type: string
                      type: object
                    hash:
                      description: The hash of the data resource. Derived from the
                        value and the hash of any binary blob attachment
                    id:
                      description: The UUID of the data resource
                    namespace:
                      description: The namespace of the data resource
                      type: string
                    validator:
                      description: The data validator type
                      type: string
                    value:
                      description: The value for the data, stored in the FireFly core
                        database. Can be any JSON type - object, array, string, number
                        or boolean. Can be combined with a binary blob attachment
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages/{msgid}/events:
    get:
      description: 'TODO: Description'
      operationId: getMsgEvents
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: msgid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: correlator
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: reference
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: sequence
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: topic
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    correlator:
                      description: For message events, this is the 'header.cid' field
                        from the referenced message. For certain other event types,
                        a secondary object is referenced such as a token pool
                    created:
                      description: The time the event was emitted. Not guaranteed
                        to be unique, or to increase between events in the same order
                        as the final sequence events are delivered to your application.
                        As such, the 'sequence' field should be used instead of the
                        'created' field for querying events in the exact order they
                        are delivered to applications
                    id:
                      description: The UUID assigned to this event by your local FireFly
                        node
                    namespace:
                      description: The namespace of the event. Your application must
                        subscribe to events within a namespace
                      type: string
                    reference:
                      description: The UUID of an resource that is the subject of
                        this event. The event type determines what type of resource
                        is referenced, and whether this field might be unset
                    sequence:
                      description: A sequence indicating the order in which events
                        are delivered to your application. Assure to be unique per
                        event in your local FireFly database (unlike the created timestamp)
                      format: int64
                      type: integer
                    topic:
                      description: A stream of information this event relates to.
                        For message confirmation events, a separate event is emitted
                        for each topic in the message. For blockchain events, the
                        listener specifies the topic. Rules exist for how the topic
                        is set for other event types
                      type: string
                    tx:
                      description: The UUID of a transaction that is event is part
                        of. Not all events are part of a transaction
                    type:
                      description: All interesting activity in FireFly is emitted
                        as a FireFly event, of a given type. The 'type' combined with
                        the 'reference' can be used to determine how to process the
                        event within your application
                      enum:
                      - transaction_submitted
                      - message_confirmed
                      - message_rejected
                      - namespace_confirmed
                      - datatype_confirmed
                      - identity_confirmed
                      - identity_updated
                      - token_pool_confirmed
                      - token_transfer_confirmed
                      - token_transfer_op_failed
                      - token_approval_confirmed
                      - token_approval_op_failed
                      - contract_interface_confirmed
                      - contract_api_confirmed
                      - blockchain_event_received
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages/{msgid}/transaction:
    get:
      description: 'TODO: Description'
      operationId: getMsgTxn
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: msgid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  blockchainIds:
                    description: The blockchain transaction ID, in the format specific
                      to the blockchain involved in the transaction. Not all FireFly
                      transactions include a blockchain. FireFly transactions are
                      extensible to support multiple blockchain transactions
                    items:
                      description: The blockchain transaction ID, in the format specific
                        to the blockchain involved in the transaction. Not all FireFly
                        transactions include a blockchain. FireFly transactions are
                        extensible to support multiple blockchain transactions
                      type: string
                    type: array
                  created:
                    description: The time the transaction was created on this node.
                      Note the transaction is individually created with the same UUID
                      on each participant in the FireFly transaction
                  id:
                    description: The UUID of the FireFly transaction
                  namespace:
                    description: The namespace of the FireFly transaction
                    type: string
                  type:
                    description: The type of the FireFly transaction
                    enum:
                    - none
                    - unpinned
                    - batch_pin
                    - token_pool
                    - token_transfer
                    - contract_invoke
                    - token_approval
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages/broadcast:
    post:
      description: 'TODO: Description'
      operationId: postNewMessageBroadcast
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                batch:
                  description: The UUID of the batch in which the message was pinned/transferred
                confirmed:
                  description: The timestamp of when the message was confirmed/rejected
                data:
                  description: The list of data elements attached to the message
                  items:
                    description: The list of data elements attached to the message
                    properties:
                      hash:
                        description: The hash of the referenced data
                      id:
                        description: The UUID of the referenced data resource
                    type: object
                  type: array
                hash:
                  description: The hash of the message. Derived from the header, which
                    includes the data hash
                header:
                  description: The message header contains all fields that are used
                    to build the message hash
                  properties:
                    author:
                      description: The DID of identity of the submitter
                      type: string
                    cid:
                      description: The correlation ID of the message. Set this when
                        a message is a response to another message
                    created:
                      description: The creation time of the message
                    datahash:
                      description: A single hash representing all data in the message.
                        Derived from the array of data ids+hashes attached to this
                        message
                    id:
                      description: The UUID of the message. Unique to each message
                    key:
                      description: The on-chain signing key used to sign the transaction
                      type: string
                    namespace:
                      description: The namespace of the message
                      type: string
                    tag:
                      description: The message tag indicates the purpose of the message
                        to the applications that process it
                      type: string
                    topics:
                      description: A message topic associates this message with an
                        ordered stream of data. A custom topic should be assigned
                        - using the default topic is discouraged
                      items:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        type: string
                      type: array
                    txtype:
                      description: The type of transaction used to order/deliver this
                        message
                      type: string
                    type:
                      description: The type of the message
                      enum:
                      - definition
                      - broadcast
                      - private
                      - groupinit
                      - transfer_broadcast
                      - transfer_private
                      type: string
                  type: object
                pins:
                  description: For private messages, a unique pin hash:nonce is assigned
                    for each topic
                  items:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    type: string
                  type: array
                state:
                  description: The current state of the message
                  enum:
                  - staged
                  - ready
                  - sent
                  - pending
                  - confirmed
                  - rejected
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  batch:
                    description: The UUID of the batch in which the message was pinned/transferred
                  confirmed:
                    description: The timestamp of when the message was confirmed/rejected
                  data:
                    description: The list of data elements attached to the message
                    items:
                      description: The list of data elements attached to the message
                      properties:
                        hash:
                          description: The hash of the referenced data
                        id:
                          description: The UUID of the referenced data resource
                      type: object
                    type: array
                  hash:
                    description: The hash of the message. Derived from the header,
                      which includes the data hash
                  header:
                    description: The message header contains all fields that are used
                      to build the message hash
                    properties:
                      author:
                        description: The DID of identity of the submitter
                        type: string
                      cid:
                        description: The correlation ID of the message. Set this when
                          a message is a response to another message
                      created:
                        description: The creation time of the message
                      datahash:
                        description: A single hash representing all data in the message.
                          Derived from the array of data ids+hashes attached to this
                          message
                      id:
                        description: The UUID of the message. Unique to each message
                      key:
                        description: The on-chain signing key used to sign the transaction
                        type: string
                      namespace:
                        description: The namespace of the message
                        type: string
                      tag:
                        description: The message tag indicates the purpose of the
                          message to the applications that process it
                        type: string
                      topics:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        items:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          type: string
                        type: array
                      txtype:
                        description: The type of transaction used to order/deliver
                          this message
                        type: string
                      type:
                        description: The type of the message
                        enum:
                        - definition
                        - broadcast
                        - private
                        - groupinit
                        - transfer_broadcast
                        - transfer_private
                        type: string
                    type: object
                  pins:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    items:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      type: string
                    type: array
                  state:
                    description: The current state of the message
                    enum:
                    - staged
                    - ready
                    - sent
                    - pending
                    - confirmed
                    - rejected
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  batch:
                    description: The UUID of the batch in which the message was pinned/transferred
                  confirmed:
                    description: The timestamp of when the message was confirmed/rejected
                  data:
                    description: The list of data elements attached to the message
                    items:
                      description: The list of data elements attached to the message
                      properties:
                        hash:
                          description: The hash of the referenced data
                        id:
                          description: The UUID of the referenced data resource
                      type: object
                    type: array
                  hash:
                    description: The hash of the message. Derived from the header,
                      which includes the data hash
                  header:
                    description: The message header contains all fields that are used
                      to build the message hash
                    properties:
                      author:
                        description: The DID of identity of the submitter
                        type: string
                      cid:
                        description: The correlation ID of the message. Set this when
                          a message is a response to another message
                      created:
                        description: The creation time of the message
                      datahash:
                        description: A single hash representing all data in the message.
                          Derived from the array of data ids+hashes attached to this
                          message
                      id:
                        description: The UUID of the message. Unique to each message
                      key:
                        description: The on-chain signing key used to sign the transaction
                        type: string
                      namespace:
                        description: The namespace of the message
                        type: string
                      tag:
                        description: The message tag indicates the purpose of the
                          message to the applications that process it
                        type: string
                      topics:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        items:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          type: string
                        type: array
                      txtype:
                        description: The type of transaction used to order/deliver
                          this message
                        type: string
                      type:
                        description: The type of the message
                        enum:
                        - definition
                        - broadcast
                        - private
                        - groupinit
                        - transfer_broadcast
                        - transfer_private
                        type: string
                    type: object
                  pins:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    items:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      type: string
                    type: array
                  state:
                    description: The current state of the message
                    enum:
                    - staged
                    - ready
                    - sent
                    - pending
                    - confirmed
                    - rejected
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages/private:
    post:
      description: 'TODO: Description'
      operationId: postNewMessagePrivate
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                batch:
                  description: The UUID of the batch in which the message was pinned/transferred
                confirmed:
                  description: The timestamp of when the message was confirmed/rejected
                data:
                  description: The list of data elements attached to the message
                  items:
                    description: The list of data elements attached to the message
                    properties:
                      hash:
                        description: The hash of the referenced data
                      id:
                        description: The UUID of the referenced data resource
                    type: object
                  type: array
                group:
                  description: Allows you to specify details of the private group
                    of recipients in-line in the message. Alternative to using the
                    header.group to specify the hash of a group that has been previously
                    resolved
                  properties:
                    members:
                      description: An array of members of the group. If no identities
                        local to the sending node are included, then the organization
                        owner of the local node is added automatically
                      items:
                        description: An array of members of the group. If no identities
                          local to the sending node are included, then the organization
                          owner of the local node is added automatically
                        properties:
                          identity:
                            description: The DID of the group member. On input can
                              be a UUID or org name, and will be resolved to a DID
                            type: string
                          node:
                            description: The UUID of the node that will receive a
                              copy of the off-chain message for the identity. The
                              first applicable node for the identity will be picked
                              automatically on input if not specified
                            type: string
                        type: object
                      type: array
                    name:
                      description: Optional name for the group. Allows you to have
                        multiple separate groups with the same list of participants
                      type: string
                  type: object
                hash:
                  description: The hash of the message. Derived from the header, which
                    includes the data hash
                header:
                  description: The message header contains all fields that are used
                    to build the message hash
                  properties:
                    author:
                      description: The DID of identity of the submitter
                      type: string
                    cid:
                      description: The correlation ID of the message. Set this when
                        a message is a response to another message
                    created:
                      description: The creation time of the message
                    datahash:
                      description: A single hash representing all data in the message.
                        Derived from the array of data ids+hashes attached to this
                        message
                    group:
                      description: Private messages only - the identifier hash of
                        the privacy group. Derived from the name and member list of
                        the group
                    id:
                      description: The UUID of the message. Unique to each message
                    key:
                      description: The on-chain signing key used to sign the transaction
                      type: string
                    namespace:
                      description: The namespace of the message
                      type: string
                    tag:
                      description: The message tag indicates the purpose of the message
                        to the applications that process it
                      type: string
                    topics:
                      description: A message topic associates this message with an
                        ordered stream of data. A custom topic should be assigned
                        - using the default topic is discouraged
                      items:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        type: string
                      type: array
                    txtype:
                      description: The type of transaction used to order/deliver this
                        message
                      type: string
                    type:
                      description: The type of the message
                      enum:
                      - definition
                      - broadcast
                      - private
                      - groupinit
                      - transfer_broadcast
                      - transfer_private
                      type: string
                  type: object
                pins:
                  description: For private messages, a unique pin hash:nonce is assigned
                    for each topic
                  items:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    type: string
                  type: array
                state:
                  description: The current state of the message
                  enum:
                  - staged
                  - ready
                  - sent
                  - pending
                  - confirmed
                  - rejected
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  batch:
                    description: The UUID of the batch in which the message was pinned/transferred
                  confirmed:
                    description: The timestamp of when the message was confirmed/rejected
                  data:
                    description: The list of data elements attached to the message
                    items:
                      description: The list of data elements attached to the message
                      properties:
                        hash:
                          description: The hash of the referenced data
                        id:
                          description: The UUID of the referenced data resource
                      type: object
                    type: array
                  hash:
                    description: The hash of the message. Derived from the header,
                      which includes the data hash
                  header:
                    description: The message header contains all fields that are used
                      to build the message hash
                    properties:
                      author:
                        description: The DID of identity of the submitter
                        type: string
                      cid:
                        description: The correlation ID of the message. Set this when
                          a message is a response to another message
                      created:
                        description: The creation time of the message
                      datahash:
                        description: A single hash representing all data in the message.
                          Derived from the array of data ids+hashes attached to this
                          message
                      group:
                        description: Private messages only - the identifier hash of
                          the privacy group. Derived from the name and member list
                          of the group
                      id:
                        description: The UUID of the message. Unique to each message
                      key:
                        description: The on-chain signing key used to sign the transaction
                        type: string
                      namespace:
                        description: The namespace of the message
                        type: string
                      tag:
                        description: The message tag indicates the purpose of the
                          message to the applications that process it
                        type: string
                      topics:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        items:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          type: string
                        type: array
                      txtype:
                        description: The type of transaction used to order/deliver
                          this message
                        type: string
                      type:
                        description: The type of the message
                        enum:
                        - definition
                        - broadcast
                        - private
                        - groupinit
                        - transfer_broadcast
                        - transfer_private
                        type: string
                    type: object
                  pins:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    items:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      type: string
                    type: array
                  state:
                    description: The current state of the message
                    enum:
                    - staged
                    - ready
                    - sent
                    - pending
                    - confirmed
                    - rejected
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  batch:
                    description: The UUID of the batch in which the message was pinned/transferred
                  confirmed:
                    description: The timestamp of when the message was confirmed/rejected
                  data:
                    description: The list of data elements attached to the message
                    items:
                      description: The list of data elements attached to the message
                      properties:
                        hash:
                          description: The hash of the referenced data
                        id:
                          description: The UUID of the referenced data resource
                      type: object
                    type: array
                  hash:
                    description: The hash of the message. Derived from the header,
                      which includes the data hash
                  header:
                    description: The message header contains all fields that are used
                      to build the message hash
                    properties:
                      author:
                        description: The DID of identity of the submitter
                        type: string
                      cid:
                        description: The correlation ID of the message. Set this when
                          a message is a response to another message
                      created:
                        description: The creation time of the message
                      datahash:
                        description: A single hash representing all data in the message.
                          Derived from the array of data ids+hashes attached to this
                          message
                      group:
                        description: Private messages only - the identifier hash of
                          the privacy group. Derived from the name and member list
                          of the group
                      id:
                        description: The UUID of the message. Unique to each message
                      key:
                        description: The on-chain signing key used to sign the transaction
                        type: string
                      namespace:
                        description: The namespace of the message
                        type: string
                      tag:
                        description: The message tag indicates the purpose of the
                          message to the applications that process it
                        type: string
                      topics:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        items:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          type: string
                        type: array
                      txtype:
                        description: The type of transaction used to order/deliver
                          this message
                        type: string
                      type:
                        description: The type of the message
                        enum:
                        - definition
                        - broadcast
                        - private
                        - groupinit
                        - transfer_broadcast
                        - transfer_private
                        type: string
                    type: object
                  pins:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    items:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      type: string
                    type: array
                  state:
                    description: The current state of the message
                    enum:
                    - staged
                    - ready
                    - sent
                    - pending
                    - confirmed
                    - rejected
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/messages/requestreply:
    post:
      description: 'TODO: Description'
      operationId: postNewMessageRequestReply
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                batch:
                  description: The UUID of the batch in which the message was pinned/transferred
                confirmed:
                  description: The timestamp of when the message was confirmed/rejected
                data:
                  description: The list of data elements attached to the message
                  items:
                    description: The list of data elements attached to the message
                    properties:
                      hash:
                        description: The hash of the referenced data
                      id:
                        description: The UUID of the referenced data resource
                    type: object
                  type: array
                group:
                  description: Allows you to specify details of the private group
                    of recipients in-line in the message. Alternative to using the
                    header.group to specify the hash of a group that has been previously
                    resolved
                  properties:
                    members:
                      description: An array of members of the group. If no identities
                        local to the sending node are included, then the organization
                        owner of the local node is added automatically
                      items:
                        description: An array of members of the group. If no identities
                          local to the sending node are included, then the organization
                          owner of the local node is added automatically
                        properties:
                          identity:
                            description: The DID of the group member. On input can
                              be a UUID or org name, and will be resolved to a DID
                            type: string
                          node:
                            description: The UUID of the node that will receive a
                              copy of the off-chain message for the identity. The
                              first applicable node for the identity will be picked
                              automatically on input if not specified
                            type: string
                        type: object
                      type: array
                    name:
                      description: Optional name for the group. Allows you to have
                        multiple separate groups with the same list of participants
                      type: string
                  type: object
                hash:
                  description: The hash of the message. Derived from the header, which
                    includes the data hash
                header:
                  description: The message header contains all fields that are used
                    to build the message hash
                  properties:
                    author:
                      description: The DID of identity of the submitter
                      type: string
                    cid:
                      description: The correlation ID of the message. Set this when
                        a message is a response to another message
                    created:
                      description: The creation time of the message
                    datahash:
                      description: A single hash representing all data in the message.
                        Derived from the array of data ids+hashes attached to this
                        message
                    group:
                      description: Private messages only - the identifier hash of
                        the privacy group. Derived from the name and member list of
                        the group
                    id:
                      description: The UUID of the message. Unique to each message
                    key:
                      description: The on-chain signing key used to sign the transaction
                      type: string
                    namespace:
                      description: The namespace of the message
                      type: string
                    tag:
                      description: The message tag indicates the purpose of the message
                        to the applications that process it
                      type: string
                    topics:
                      description: A message topic associates this message with an
                        ordered stream of data. A custom topic should be assigned
                        - using the default topic is discouraged
                      items:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        type: string
                      type: array
                    txtype:
                      description: The type of transaction used to order/deliver this
                        message
                      type: string
                    type:
                      description: The type of the message
                      enum:
                      - definition
                      - broadcast
                      - private
                      - groupinit
                      - transfer_broadcast
                      - transfer_private
                      type: string
                  type: object
                pins:
                  description: For private messages, a unique pin hash:nonce is assigned
                    for each topic
                  items:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    type: string
                  type: array
                state:
                  description: The current state of the message
                  enum:
                  - staged
                  - ready
                  - sent
                  - pending
                  - confirmed
                  - rejected
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  batch:
                    description: The UUID of the batch in which the message was pinned/transferred
                  confirmed:
                    description: The timestamp of when the message was confirmed/rejected
                  data:
                    description: The list of data elements attached to the message
                    items:
                      description: The list of data elements attached to the message
                      properties:
                        hash:
                          description: The hash of the referenced data
                        id:
                          description: The UUID of the referenced data resource
                      type: object
                    type: array
                  group:
                    description: Allows you to specify details of the private group
                      of recipients in-line in the message. Alternative to using the
                      header.group to specify the hash of a group that has been previously
                      resolved
                    properties:
                      members:
                        description: An array of members of the group. If no identities
                          local to the sending node are included, then the organization
                          owner of the local node is added automatically
                        items:
                          description: An array of members of the group. If no identities
                            local to the sending node are included, then the organization
                            owner of the local node is added automatically
                          properties:
                            identity:
                              description: The DID of the group member. On input can
                                be a UUID or org name, and will be resolved to a DID
                              type: string
                            node:
                              description: The UUID of the node that will receive
                                a copy of the off-chain message for the identity.
                                The first applicable node for the identity will be
                                picked automatically on input if not specified
                              type: string
                          type: object
                        type: array
                      name:
                        description: Optional name for the group. Allows you to have
                          multiple separate groups with the same list of participants
                        type: string
                    type: object
                  hash:
                    description: The hash of the message. Derived from the header,
                      which includes the data hash
                  header:
                    description: The message header contains all fields that are used
                      to build the message hash
                    properties:
                      author:
                        description: The DID of identity of the submitter
                        type: string
                      cid:
                        description: The correlation ID of the message. Set this when
                          a message is a response to another message
                      created:
                        description: The creation time of the message
                      datahash:
                        description: A single hash representing all data in the message.
                          Derived from the array of data ids+hashes attached to this
                          message
                      group:
                        description: Private messages only - the identifier hash of
                          the privacy group. Derived from the name and member list
                          of the group
                      id:
                        description: The UUID of the message. Unique to each message
                      key:
                        description: The on-chain signing key used to sign the transaction
                        type: string
                      namespace:
                        description: The namespace of the message
                        type: string
                      tag:
                        description: The message tag indicates the purpose of the
                          message to the applications that process it
                        type: string
                      topics:
                        description: A message topic associates this message with
                          an ordered stream of data. A custom topic should be assigned
                          - using the default topic is discouraged
                        items:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          type: string
                        type: array
                      txtype:
                        description: The type of transaction used to order/deliver
                          this message
                        type: string
                      type:
                        description: The type of the message
                        enum:
                        - definition
                        - broadcast
                        - private
                        - groupinit
                        - transfer_broadcast
                        - transfer_private
                        type: string
                    type: object
                  pins:
                    description: For private messages, a unique pin hash:nonce is
                      assigned for each topic
                    items:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      type: string
                    type: array
                  state:
                    description: The current state of the message
                    enum:
                    - staged
                    - ready
                    - sent
                    - pending
                    - confirmed
                    - rejected
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/operations:
    get:
      description: 'TODO: Description'
      operationId: getOps
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: error
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: input
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: output
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: plugin
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: retry
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: status
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The time the operation was created
                    error:
                      description: Any error reported back from the plugin for this
                        operation
                      type: string
                    id:
                      description: The UUID of the operation
                    input:
                      additionalProperties:
                        description: The input to this operation
                      description: The input to this operation
                      type: object
                    namespace:
                      description: The namespace of the operation
                      type: string
                    output:
                      additionalProperties:
                        description: Any output reported back from the plugin for
                          this operation
                      description: Any output reported back from the plugin for this
                        operation
                      type: object
                    plugin:
                      description: The plugin responsible for performing the operation
                      type: string
                    retry:
                      description: If this operation was initiated as a retry to a
                        previous operation, this field points to the UUID of the operation
                        being retried
                    status:
                      description: The current status of the operation
                      type: string
                    tx:
                      description: The UUID of the FireFly transaction the operation
                        is part of
                    type:
                      description: The type of the operation
                      enum:
                      - blockchain_pin_batch
                      - blockchain_invoke
                      - sharedstorage_upload_batch
                      - sharedstorage_upload_blob
                      - sharedstorage_download_batch
                      - sharedstorage_download_blob
                      - dataexchange_send_batch
                      - dataexchange_send_blob
                      - token_create_pool
                      - token_activate_pool
                      - token_transfer
                      - token_approval
                      type: string
                    updated:
                      description: The last update time of the operation
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/operations/{opid}:
    get:
      description: 'TODO: Description'
      operationId: getOpByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: opid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the operation was created
                  error:
                    description: Any error reported back from the plugin for this
                      operation
                    type: string
                  id:
                    description: The UUID of the operation
                  input:
                    additionalProperties:
                      description: The input to this operation
                    description: The input to this operation
                    type: object
                  namespace:
                    description: The namespace of the operation
                    type: string
                  output:
                    additionalProperties:
                      description: Any output reported back from the plugin for this
                        operation
                    description: Any output reported back from the plugin for this
                      operation
                    type: object
                  plugin:
                    description: The plugin responsible for performing the operation
                    type: string
                  retry:
                    description: If this operation was initiated as a retry to a previous
                      operation, this field points to the UUID of the operation being
                      retried
                  status:
                    description: The current status of the operation
                    type: string
                  tx:
                    description: The UUID of the FireFly transaction the operation
                      is part of
                  type:
                    description: The type of the operation
                    enum:
                    - blockchain_pin_batch
                    - blockchain_invoke
                    - sharedstorage_upload_batch
                    - sharedstorage_upload_blob
                    - sharedstorage_download_batch
                    - sharedstorage_download_blob
                    - dataexchange_send_batch
                    - dataexchange_send_blob
                    - token_create_pool
                    - token_activate_pool
                    - token_transfer
                    - token_approval
                    type: string
                  updated:
                    description: The last update time of the operation
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/operations/{opid}/retry:
    post:
      description: 'TODO: Description'
      operationId: postOpRetry
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: opid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "202":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time the operation was created
                  error:
                    description: Any error reported back from the plugin for this
                      operation
                    type: string
                  id:
                    description: The UUID of the operation
                  input:
                    additionalProperties:
                      description: The input to this operation
                    description: The input to this operation
                    type: object
                  namespace:
                    description: The namespace of the operation
                    type: string
                  output:
                    additionalProperties:
                      description: Any output reported back from the plugin for this
                        operation
                    description: Any output reported back from the plugin for this
                      operation
                    type: object
                  plugin:
                    description: The plugin responsible for performing the operation
                    type: string
                  retry:
                    description: If this operation was initiated as a retry to a previous
                      operation, this field points to the UUID of the operation being
                      retried
                  status:
                    description: The current status of the operation
                    type: string
                  tx:
                    description: The UUID of the FireFly transaction the operation
                      is part of
                  type:
                    description: The type of the operation
                    enum:
                    - blockchain_pin_batch
                    - blockchain_invoke
                    - sharedstorage_upload_batch
                    - sharedstorage_upload_blob
                    - sharedstorage_download_batch
                    - sharedstorage_download_blob
                    - dataexchange_send_batch
                    - dataexchange_send_blob
                    - token_create_pool
                    - token_activate_pool
                    - token_transfer
                    - token_approval
                    type: string
                  updated:
                    description: The last update time of the operation
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/subscriptions:
    get:
      description: 'TODO: Description'
      operationId: getSubscriptions
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: events
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: filters
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: options
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: transport
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: Creation time of the subscription
                    ephemeral:
                      description: Ephemeral subscriptions only exist as long as the
                        application is connected, and as such will miss events that
                        occur while the application is disconnected, and cannot be
                        created administratively. You can create one over over a connected
                        WebSocket connection
                      type: boolean
                    filter:
                      description: Server-side filter to apply to events
                      properties:
                        author:
                          description: 'Deprecated: Please use ''message.author''
                            instead'
                          type: string
                        blockchainevent:
                          description: Filters specific to blockchain events. If an
                            event is not a blockchain event, these filters are ignored
                          properties:
                            listener:
                              description: Regular expression to apply to the blockchain
                                event 'listener' field, which is the UUID of the event
                                listener. So you can restrict your subscription to
                                certain blockchain listeners. Alternatively to avoid
                                your application need to know listener UUIDs you can
                                set the 'topic' field of blockchain event listeners,
                                and use a topic filter on your subscriptions
                              type: string
                            name:
                              description: Regular expression to apply to the blockchain
                                event 'name' field, which is the name of the event
                                in the underlying blockchain smart contract
                              type: string
                          type: object
                        events:
                          description: Regular expression to apply to the event type,
                            to subscribe to a subset of event types
                          type: string
                        group:
                          description: 'Deprecated: Please use ''message.group'' instead'
                          type: string
                        message:
                          description: Filters specific to message events. If an event
                            is not a message event, these filters are ignored
                          properties:
                            author:
                              description: Regular expression to apply to the message
                                'header.author' field
                              type: string
                            group:
                              description: Regular expression to apply to the message
                                'header.group' field
                              type: string
                            tag:
                              description: Regular expression to apply to the message
                                'header.tag' field
                              type: string
                          type: object
                        tag:
                          description: 'Deprecated: Please use ''message.tag'' instead'
                          type: string
                        topic:
                          description: Regular expression to apply to the topic of
                            the event, to subscribe to a subset of topics. Note for
                            messages sent with multiple topics, a separate event is
                            emitted for each topic
                          type: string
                        topics:
                          description: 'Deprecated: Please use ''topic'' instead'
                          type: string
                        transaction:
                          description: Filters specific to events with a transaction.
                            If an event is not associated with a transaction, this
                            filter is ignored
                          properties:
                            type:
                              description: Regular expression to apply to the transaction
                                'type' field
                              type: string
                          type: object
                      type: object
                    id:
                      description: The UUID of the subscription
                    name:
                      description: The name of the subscription. The application specifies
                        this name when it connects, in order to attach to the subscription
                        and receive events that arrived while it was disconnected.
                        If multiple apps connect to the same subscription, events
                        are workload balanced across the connected application instances
                      type: string
                    namespace:
                      description: The namespace of the subscription. A subscription
                        will only receive events generated in the namespace of the
                        subscription
                      type: string
                    options:
                      description: Subscription options
                      properties:
                        firstEvent:
                          description: Whether your appplication would like to receive
                            events from the 'oldest' event emitted by your FireFly
                            node (from the beginning of time), or the 'newest' event
                            (from now), or a specific event sequence. Default is 'newest'
                          type: string
                        readAhead:
                          description: The number of events to stream ahead to your
                            application, while waiting for confirmation of consumption
                            of those events. At least once delivery semantics are
                            used in FireFly, so if your application crashes/reconnects
                            this is the maximum number of events you would expect
                            to be redelivered after it restarts
                          maximum: 65535
                          minimum: 0
                          type: integer
                        withData:
                          description: Whether message events delivered over the subscription,
                            should be packaged with the full data of those messages
                            in-line as part of the event JSON payload. Or if the application
                            should make separate REST calls to download that data.
                            May not be supported on some transports.
                          type: boolean
                      type: object
                    transport:
                      description: The transport plugin responsible for event delivery
                        (WebSockets, Webhooks, JMS, NATS etc.)
                      type: string
                    updated:
                      description: Last time the subscription was updated
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewSubscription
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                filter:
                  description: Server-side filter to apply to events
                  properties:
                    author:
                      description: 'Deprecated: Please use ''message.author'' instead'
                      type: string
                    blockchainevent:
                      description: Filters specific to blockchain events. If an event
                        is not a blockchain event, these filters are ignored
                      properties:
                        listener:
                          description: Regular expression to apply to the blockchain
                            event 'listener' field, which is the UUID of the event
                            listener. So you can restrict your subscription to certain
                            blockchain listeners. Alternatively to avoid your application
                            need to know listener UUIDs you can set the 'topic' field
                            of blockchain event listeners, and use a topic filter
                            on your subscriptions
                          type: string
                        name:
                          description: Regular expression to apply to the blockchain
                            event 'name' field, which is the name of the event in
                            the underlying blockchain smart contract
                          type: string
                      type: object
                    events:
                      description: Regular expression to apply to the event type,
                        to subscribe to a subset of event types
                      type: string
                    group:
                      description: 'Deprecated: Please use ''message.group'' instead'
                      type: string
                    message:
                      description: Filters specific to message events. If an event
                        is not a message event, these filters are ignored
                      properties:
                        author:
                          description: Regular expression to apply to the message
                            'header.author' field
                          type: string
                        group:
                          description: Regular expression to apply to the message
                            'header.group' field
                          type: string
                        tag:
                          description: Regular expression to apply to the message
                            'header.tag' field
                          type: string
                      type: object
                    tag:
                      description: 'Deprecated: Please use ''message.tag'' instead'
                      type: string
                    topic:
                      description: Regular expression to apply to the topic of the
                        event, to subscribe to a subset of topics. Note for messages
                        sent with multiple topics, a separate event is emitted for
                        each topic
                      type: string
                    topics:
                      description: 'Deprecated: Please use ''topic'' instead'
                      type: string
                    transaction:
                      description: Filters specific to events with a transaction.
                        If an event is not associated with a transaction, this filter
                        is ignored
                      properties:
                        type:
                          description: Regular expression to apply to the transaction
                            'type' field
                          type: string
                      type: object
                  type: object
                name:
                  description: The name of the subscription. The application specifies
                    this name when it connects, in order to attach to the subscription
                    and receive events that arrived while it was disconnected. If
                    multiple apps connect to the same subscription, events are workload
                    balanced across the connected application instances
                  type: string
                namespace:
                  description: The namespace of the subscription. A subscription will
                    only receive events generated in the namespace of the subscription
                  type: string
                options:
                  description: Subscription options
                  properties:
                    firstEvent:
                      description: Whether your appplication would like to receive
                        events from the 'oldest' event emitted by your FireFly node
                        (from the beginning of time), or the 'newest' event (from
                        now), or a specific event sequence. Default is 'newest'
                      type: string
                    readAhead:
                      description: The number of events to stream ahead to your application,
                        while waiting for confirmation of consumption of those events.
                        At least once delivery semantics are used in FireFly, so if
                        your application crashes/reconnects this is the maximum number
                        of events you would expect to be redelivered after it restarts
                      maximum: 65535
                      minimum: 0
                      type: integer
                    withData:
                      description: Whether message events delivered over the subscription,
                        should be packaged with the full data of those messages in-line
                        as part of the event JSON payload. Or if the application should
                        make separate REST calls to download that data. May not be
                        supported on some transports.
                      type: boolean
                  type: object
                transport:
                  description: The transport plugin responsible for event delivery
                    (WebSockets, Webhooks, JMS, NATS etc.)
                  type: string
              type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: Creation time of the subscription
                  ephemeral:
                    description: Ephemeral subscriptions only exist as long as the
                      application is connected, and as such will miss events that
                      occur while the application is disconnected, and cannot be created
                      administratively. You can create one over over a connected WebSocket
                      connection
                    type: boolean
                  filter:
                    description: Server-side filter to apply to events
                    properties:
                      author:
                        description: 'Deprecated: Please use ''message.author'' instead'
                        type: string
                      blockchainevent:
                        description: Filters specific to blockchain events. If an
                          event is not a blockchain event, these filters are ignored
                        properties:
                          listener:
                            description: Regular expression to apply to the blockchain
                              event 'listener' field, which is the UUID of the event
                              listener. So you can restrict your subscription to certain
                              blockchain listeners. Alternatively to avoid your application
                              need to know listener UUIDs you can set the 'topic'
                              field of blockchain event listeners, and use a topic
                              filter on your subscriptions
                            type: string
                          name:
                            description: Regular expression to apply to the blockchain
                              event 'name' field, which is the name of the event in
                              the underlying blockchain smart contract
                            type: string
                        type: object
                      events:
                        description: Regular expression to apply to the event type,
                          to subscribe to a subset of event types
                        type: string
                      group:
                        description: 'Deprecated: Please use ''message.group'' instead'
                        type: string
                      message:
                        description: Filters specific to message events. If an event
                          is not a message event, these filters are ignored
                        properties:
                          author:
                            description: Regular expression to apply to the message
                              'header.author' field
                            type: string
                          group:
                            description: Regular expression to apply to the message
                              'header.group' field
                            type: string
                          tag:
                            description: Regular expression to apply to the message
                              'header.tag' field
                            type: string
                        type: object
                      tag:
                        description: 'Deprecated: Please use ''message.tag'' instead'
                        type: string
                      topic:
                        description: Regular expression to apply to the topic of the
                          event, to subscribe to a subset of topics. Note for messages
                          sent with multiple topics, a separate event is emitted for
                          each topic
                        type: string
                      topics:
                        description: 'Deprecated: Please use ''topic'' instead'
                        type: string
                      transaction:
                        description: Filters specific to events with a transaction.
                          If an event is not associated with a transaction, this filter
                          is ignored
                        properties:
                          type:
                            description: Regular expression to apply to the transaction
                              'type' field
                            type: string
                        type: object
                    type: object
                  id:
                    description: The UUID of the subscription
                  name:
                    description: The name of the subscription. The application specifies
                      this name when it connects, in order to attach to the subscription
                      and receive events that arrived while it was disconnected. If
                      multiple apps connect to the same subscription, events are workload
                      balanced across the connected application instances
                    type: string
                  namespace:
                    description: The namespace of the subscription. A subscription
                      will only receive events generated in the namespace of the subscription
                    type: string
                  options:
                    description: Subscription options
                    properties:
                      firstEvent:
                        description: Whether your appplication would like to receive
                          events from the 'oldest' event emitted by your FireFly node
                          (from the beginning of time), or the 'newest' event (from
                          now), or a specific event sequence. Default is 'newest'
                        type: string
                      readAhead:
                        description: The number of events to stream ahead to your
                          application, while waiting for confirmation of consumption
                          of those events. At least once delivery semantics are used
                          in FireFly, so if your application crashes/reconnects this
                          is the maximum number of events you would expect to be redelivered
                          after it restarts
                        maximum: 65535
                        minimum: 0
                        type: integer
                      withData:
                        description: Whether message events delivered over the subscription,
                          should be packaged with the full data of those messages
                          in-line as part of the event JSON payload. Or if the application
                          should make separate REST calls to download that data. May
                          not be supported on some transports.
                        type: boolean
                    type: object
                  transport:
                    description: The transport plugin responsible for event delivery
                      (WebSockets, Webhooks, JMS, NATS etc.)
                    type: string
                  updated:
                    description: Last time the subscription was updated
                type: object
          description: Success
        default:
          description: ""
    put:
      description: 'TODO: Description'
      operationId: putSubscription
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                filter:
                  description: Server-side filter to apply to events
                  properties:
                    author:
                      description: 'Deprecated: Please use ''message.author'' instead'
                      type: string
                    blockchainevent:
                      description: Filters specific to blockchain events. If an event
                        is not a blockchain event, these filters are ignored
                      properties:
                        listener:
                          description: Regular expression to apply to the blockchain
                            event 'listener' field, which is the UUID of the event
                            listener. So you can restrict your subscription to certain
                            blockchain listeners. Alternatively to avoid your application
                            need to know listener UUIDs you can set the 'topic' field
                            of blockchain event listeners, and use a topic filter
                            on your subscriptions
                          type: string
                        name:
                          description: Regular expression to apply to the blockchain
                            event 'name' field, which is the name of the event in
                            the underlying blockchain smart contract
                          type: string
                      type: object
                    events:
                      description: Regular expression to apply to the event type,
                        to subscribe to a subset of event types
                      type: string
                    group:
                      description: 'Deprecated: Please use ''message.group'' instead'
                      type: string
                    message:
                      description: Filters specific to message events. If an event
                        is not a message event, these filters are ignored
                      properties:
                        author:
                          description: Regular expression to apply to the message
                            'header.author' field
                          type: string
                        group:
                          description: Regular expression to apply to the message
                            'header.group' field
                          type: string
                        tag:
                          description: Regular expression to apply to the message
                            'header.tag' field
                          type: string
                      type: object
                    tag:
                      description: 'Deprecated: Please use ''message.tag'' instead'
                      type: string
                    topic:
                      description: Regular expression to apply to the topic of the
                        event, to subscribe to a subset of topics. Note for messages
                        sent with multiple topics, a separate event is emitted for
                        each topic
                      type: string
                    topics:
                      description: 'Deprecated: Please use ''topic'' instead'
                      type: string
                    transaction:
                      description: Filters specific to events with a transaction.
                        If an event is not associated with a transaction, this filter
                        is ignored
                      properties:
                        type:
                          description: Regular expression to apply to the transaction
                            'type' field
                          type: string
                      type: object
                  type: object
                name:
                  description: The name of the subscription. The application specifies
                    this name when it connects, in order to attach to the subscription
                    and receive events that arrived while it was disconnected. If
                    multiple apps connect to the same subscription, events are workload
                    balanced across the connected application instances
                  type: string
                namespace:
                  description: The namespace of the subscription. A subscription will
                    only receive events generated in the namespace of the subscription
                  type: string
                options:
                  description: Subscription options
                  properties:
                    firstEvent:
                      description: Whether your appplication would like to receive
                        events from the 'oldest' event emitted by your FireFly node
                        (from the beginning of time), or the 'newest' event (from
                        now), or a specific event sequence. Default is 'newest'
                      type: string
                    readAhead:
                      description: The number of events to stream ahead to your application,
                        while waiting for confirmation of consumption of those events.
                        At least once delivery semantics are used in FireFly, so if
                        your application crashes/reconnects this is the maximum number
                        of events you would expect to be redelivered after it restarts
                      maximum: 65535
                      minimum: 0
                      type: integer
                    withData:
                      description: Whether message events delivered over the subscription,
                        should be packaged with the full data of those messages in-line
                        as part of the event JSON payload. Or if the application should
                        make separate REST calls to download that data. May not be
                        supported on some transports.
                      type: boolean
                  type: object
                transport:
                  description: The transport plugin responsible for event delivery
                    (WebSockets, Webhooks, JMS, NATS etc.)
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: Creation time of the subscription
                  ephemeral:
                    description: Ephemeral subscriptions only exist as long as the
                      application is connected, and as such will miss events that
                      occur while the application is disconnected, and cannot be created
                      administratively. You can create one over over a connected WebSocket
                      connection
                    type: boolean
                  filter:
                    description: Server-side filter to apply to events
                    properties:
                      author:
                        description: 'Deprecated: Please use ''message.author'' instead'
                        type: string
                      blockchainevent:
                        description: Filters specific to blockchain events. If an
                          event is not a blockchain event, these filters are ignored
                        properties:
                          listener:
                            description: Regular expression to apply to the blockchain
                              event 'listener' field, which is the UUID of the event
                              listener. So you can restrict your subscription to certain
                              blockchain listeners. Alternatively to avoid your application
                              need to know listener UUIDs you can set the 'topic'
                              field of blockchain event listeners, and use a topic
                              filter on your subscriptions
                            type: string
                          name:
                            description: Regular expression to apply to the blockchain
                              event 'name' field, which is the name of the event in
                              the underlying blockchain smart contract
                            type: string
                        type: object
                      events:
                        description: Regular expression to apply to the event type,
                          to subscribe to a subset of event types
                        type: string
                      group:
                        description: 'Deprecated: Please use ''message.group'' instead'
                        type: string
                      message:
                        description: Filters specific to message events. If an event
                          is not a message event, these filters are ignored
                        properties:
                          author:
                            description: Regular expression to apply to the message
                              'header.author' field
                            type: string
                          group:
                            description: Regular expression to apply to the message
                              'header.group' field
                            type: string
                          tag:
                            description: Regular expression to apply to the message
                              'header.tag' field
                            type: string
                        type: object
                      tag:
                        description: 'Deprecated: Please use ''message.tag'' instead'
                        type: string
                      topic:
                        description: Regular expression to apply to the topic of the
                          event, to subscribe to a subset of topics. Note for messages
                          sent with multiple topics, a separate event is emitted for
                          each topic
                        type: string
                      topics:
                        description: 'Deprecated: Please use ''topic'' instead'
                        type: string
                      transaction:
                        description: Filters specific to events with a transaction.
                          If an event is not associated with a transaction, this filter
                          is ignored
                        properties:
                          type:
                            description: Regular expression to apply to the transaction
                              'type' field
                            type: string
                        type: object
                    type: object
                  id:
                    description: The UUID of the subscription
                  name:
                    description: The name of the subscription. The application specifies
                      this name when it connects, in order to attach to the subscription
                      and receive events that arrived while it was disconnected. If
                      multiple apps connect to the same subscription, events are workload
                      balanced across the connected application instances
                    type: string
                  namespace:
                    description: The namespace of the subscription. A subscription
                      will only receive events generated in the namespace of the subscription
                    type: string
                  options:
                    description: Subscription options
                    properties:
                      firstEvent:
                        description: Whether your appplication would like to receive
                          events from the 'oldest' event emitted by your FireFly node
                          (from the beginning of time), or the 'newest' event (from
                          now), or a specific event sequence. Default is 'newest'
                        type: string
                      readAhead:
                        description: The number of events to stream ahead to your
                          application, while waiting for confirmation of consumption
                          of those events. At least once delivery semantics are used
                          in FireFly, so if your application crashes/reconnects this
                          is the maximum number of events you would expect to be redelivered
                          after it restarts
                        maximum: 65535
                        minimum: 0
                        type: integer
                      withData:
                        description: Whether message events delivered over the subscription,
                          should be packaged with the full data of those messages
                          in-line as part of the event JSON payload. Or if the application
                          should make separate REST calls to download that data. May
                          not be supported on some transports.
                        type: boolean
                    type: object
                  transport:
                    description: The transport plugin responsible for event delivery
                      (WebSockets, Webhooks, JMS, NATS etc.)
                    type: string
                  updated:
                    description: Last time the subscription was updated
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/subscriptions/{subid}:
    delete:
      description: 'TODO: Description'
      operationId: deleteSubscription
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: subid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "204":
          content:
            application/json: {}
          description: Success
        default:
          description: ""
    get:
      description: 'TODO: Description'
      operationId: getSubscriptionByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: subid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: Creation time of the subscription
                  ephemeral:
                    description: Ephemeral subscriptions only exist as long as the
                      application is connected, and as such will miss events that
                      occur while the application is disconnected, and cannot be created
                      administratively. You can create one over over a connected WebSocket
                      connection
                    type: boolean
                  filter:
                    description: Server-side filter to apply to events
                    properties:
                      author:
                        description: 'Deprecated: Please use ''message.author'' instead'
                        type: string
                      blockchainevent:
                        description: Filters specific to blockchain events. If an
                          event is not a blockchain event, these filters are ignored
                        properties:
                          listener:
                            description: Regular expression to apply to the blockchain
                              event 'listener' field, which is the UUID of the event
                              listener. So you can restrict your subscription to certain
                              blockchain listeners. Alternatively to avoid your application
                              need to know listener UUIDs you can set the 'topic'
                              field of blockchain event listeners, and use a topic
                              filter on your subscriptions
                            type: string
                          name:
                            description: Regular expression to apply to the blockchain
                              event 'name' field, which is the name of the event in
                              the underlying blockchain smart contract
                            type: string
                        type: object
                      events:
                        description: Regular expression to apply to the event type,
                          to subscribe to a subset of event types
                        type: string
                      group:
                        description: 'Deprecated: Please use ''message.group'' instead'
                        type: string
                      message:
                        description: Filters specific to message events. If an event
                          is not a message event, these filters are ignored
                        properties:
                          author:
                            description: Regular expression to apply to the message
                              'header.author' field
                            type: string
                          group:
                            description: Regular expression to apply to the message
                              'header.group' field
                            type: string
                          tag:
                            description: Regular expression to apply to the message
                              'header.tag' field
                            type: string
                        type: object
                      tag:
                        description: 'Deprecated: Please use ''message.tag'' instead'
                        type: string
                      topic:
                        description: Regular expression to apply to the topic of the
                          event, to subscribe to a subset of topics. Note for messages
                          sent with multiple topics, a separate event is emitted for
                          each topic
                        type: string
                      topics:
                        description: 'Deprecated: Please use ''topic'' instead'
                        type: string
                      transaction:
                        description: Filters specific to events with a transaction.
                          If an event is not associated with a transaction, this filter
                          is ignored
                        properties:
                          type:
                            description: Regular expression to apply to the transaction
                              'type' field
                            type: string
                        type: object
                    type: object
                  id:
                    description: The UUID of the subscription
                  name:
                    description: The name of the subscription. The application specifies
                      this name when it connects, in order to attach to the subscription
                      and receive events that arrived while it was disconnected. If
                      multiple apps connect to the same subscription, events are workload
                      balanced across the connected application instances
                    type: string
                  namespace:
                    description: The namespace of the subscription. A subscription
                      will only receive events generated in the namespace of the subscription
                    type: string
                  options:
                    description: Subscription options
                    properties:
                      firstEvent:
                        description: Whether your appplication would like to receive
                          events from the 'oldest' event emitted by your FireFly node
                          (from the beginning of time), or the 'newest' event (from
                          now), or a specific event sequence. Default is 'newest'
                        type: string
                      readAhead:
                        description: The number of events to stream ahead to your
                          application, while waiting for confirmation of consumption
                          of those events. At least once delivery semantics are used
                          in FireFly, so if your application crashes/reconnects this
                          is the maximum number of events you would expect to be redelivered
                          after it restarts
                        maximum: 65535
                        minimum: 0
                        type: integer
                      withData:
                        description: Whether message events delivered over the subscription,
                          should be packaged with the full data of those messages
                          in-line as part of the event JSON payload. Or if the application
                          should make separate REST calls to download that data. May
                          not be supported on some transports.
                        type: boolean
                    type: object
                  transport:
                    description: The transport plugin responsible for event delivery
                      (WebSockets, Webhooks, JMS, NATS etc.)
                    type: string
                  updated:
                    description: Last time the subscription was updated
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/accounts:
    get:
      description: 'TODO: Description'
      operationId: getTokenAccounts
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    key:
                      description: The blockchain signing identity this balance applies
                        to
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/accounts/{key}/pools:
    get:
      description: 'TODO: Description'
      operationId: getTokenAccountPools
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: key
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: pool
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    pool:
                      description: The UUID the token pool this balance entry applies
                        to
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/approvals:
    get:
      description: 'TODO: Description'
      operationId: getTokenApprovals
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: approved
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blockchainevent
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: connector
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: localid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: operator
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: pool
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: protocolid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    approved:
                      description: Whether this record grants permission for an operator
                        to perform actions on the token balance (true), or revokes
                        permission (false)
                      type: boolean
                    blockchainEvent:
                      description: The UUID of the blockchain event
                    connector:
                      description: The name of the token connector, as specified in
                        the FireFly core configuration file. Required on input when
                        there are more than one token connectors configured
                      type: string
                    created:
                      description: The creation time of the token approval
                    info:
                      additionalProperties:
                        description: Token connector specific information about the
                          approval operation, such as whether it applied to a limited
                          balance of a fungible token. See your chosen token connector
                          documentation for details
                      description: Token connector specific information about the
                        approval operation, such as whether it applied to a limited
                        balance of a fungible token. See your chosen token connector
                        documentation for details
                      type: object
                    key:
                      description: The blockchain signing key for the approval request.
                        On input defaults to the first signing key of the organization
                        that operates the node
                      type: string
                    localId:
                      description: The UUID of this token approval, in the local FireFly
                        node
                    namespace:
                      description: The namespace for the approval, which must match
                        the namespace of the token pool
                      type: string
                    operator:
                      description: The blockchain identity that is granted the approval
                      type: string
                    pool:
                      description: The UUID the token pool this approval applies to
                    protocolId:
                      description: A unique identifier for this approval, as provided
                        by the token connector
                      type: string
                    tokenIndex:
                      description: The index of the token within the pool that this
                        approval applies to
                      type: string
                    tx:
                      description: If submitted via FireFly, this will reference the
                        UUID of the FireFly transaction (if the token connector in
                        use supports attaching data)
                      properties:
                        id:
                          description: The UUID of the FireFly transaction
                        type:
                          description: The type of the FireFly transaction
                          type: string
                      type: object
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postTokenApproval
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                approved:
                  description: Whether this record grants permission for an operator
                    to perform actions on the token balance (true), or revokes permission
                    (false)
                  type: boolean
                config:
                  additionalProperties:
                    description: Input only field, with token connector specific configuration
                      of the approval.  See your chosen token connector documentation
                      for details
                  description: Input only field, with token connector specific configuration
                    of the approval.  See your chosen token connector documentation
                    for details
                  type: object
                connector:
                  description: The name of the token connector, as specified in the
                    FireFly core configuration file. Required on input when there
                    are more than one token connectors configured
                  type: string
                info:
                  additionalProperties:
                    description: Token connector specific information about the approval
                      operation, such as whether it applied to a limited balance of
                      a fungible token. See your chosen token connector documentation
                      for details
                  description: Token connector specific information about the approval
                    operation, such as whether it applied to a limited balance of
                    a fungible token. See your chosen token connector documentation
                    for details
                  type: object
                key:
                  description: The blockchain signing key for the approval request.
                    On input defaults to the first signing key of the organization
                    that operates the node
                  type: string
                namespace:
                  description: The namespace for the approval, which must match the
                    namespace of the token pool
                  type: string
                operator:
                  description: The blockchain identity that is granted the approval
                  type: string
                pool:
                  description: The name or UUID of a token pool. Required if more
                    than one pool exists.
                  type: string
                tokenIndex:
                  description: The index of the token within the pool that this approval
                    applies to
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  approved:
                    description: Whether this record grants permission for an operator
                      to perform actions on the token balance (true), or revokes permission
                      (false)
                    type: boolean
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the token approval
                  info:
                    additionalProperties:
                      description: Token connector specific information about the
                        approval operation, such as whether it applied to a limited
                        balance of a fungible token. See your chosen token connector
                        documentation for details
                    description: Token connector specific information about the approval
                      operation, such as whether it applied to a limited balance of
                      a fungible token. See your chosen token connector documentation
                      for details
                    type: object
                  key:
                    description: The blockchain signing key for the approval request.
                      On input defaults to the first signing key of the organization
                      that operates the node
                    type: string
                  localId:
                    description: The UUID of this token approval, in the local FireFly
                      node
                  namespace:
                    description: The namespace for the approval, which must match
                      the namespace of the token pool
                    type: string
                  operator:
                    description: The blockchain identity that is granted the approval
                    type: string
                  pool:
                    description: The UUID the token pool this approval applies to
                  protocolId:
                    description: A unique identifier for this approval, as provided
                      by the token connector
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      approval applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  approved:
                    description: Whether this record grants permission for an operator
                      to perform actions on the token balance (true), or revokes permission
                      (false)
                    type: boolean
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the token approval
                  info:
                    additionalProperties:
                      description: Token connector specific information about the
                        approval operation, such as whether it applied to a limited
                        balance of a fungible token. See your chosen token connector
                        documentation for details
                    description: Token connector specific information about the approval
                      operation, such as whether it applied to a limited balance of
                      a fungible token. See your chosen token connector documentation
                      for details
                    type: object
                  key:
                    description: The blockchain signing key for the approval request.
                      On input defaults to the first signing key of the organization
                      that operates the node
                    type: string
                  localId:
                    description: The UUID of this token approval, in the local FireFly
                      node
                  namespace:
                    description: The namespace for the approval, which must match
                      the namespace of the token pool
                    type: string
                  operator:
                    description: The blockchain identity that is granted the approval
                    type: string
                  pool:
                    description: The UUID the token pool this approval applies to
                  protocolId:
                    description: A unique identifier for this approval, as provided
                      by the token connector
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      approval applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/balances:
    get:
      description: 'TODO: Description'
      operationId: getTokenBalances
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: balance
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: connector
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: pool
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tokenindex
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: uri
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    balance:
                      description: The numeric balance. For non-fungible tokens will
                        always be 1. For fungible tokens, the number of decimals for
                        the token pool should be considered when interpreting the
                        balance. For example, with 18 decimals a fractional balance
                        of 10.234 will be returned as 10,234,000,000,000,000,000
                    connector:
                      description: The token connector that is responsible for the
                        token pool of this balance entry
                      type: string
                    key:
                      description: The blockchain signing identity this balance applies
                        to
                      type: string
                    namespace:
                      description: The namespace of the token pool for this balance
                        entry
                      type: string
                    pool:
                      description: The UUID the token pool this balance entry applies
                        to
                    tokenIndex:
                      description: The index of the token within the pool that this
                        balance applies to
                      type: string
                    updated:
                      description: The last time the balance was updated by applying
                        a transfer event
                    uri:
                      description: The URI of the token this balance entry applies
                        to
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/burn:
    post:
      description: 'TODO: Description'
      operationId: postTokenBurn
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: The amount for the transfer. For non-fungible tokens
                    will always be 1. For fungible tokens, the number of decimals
                    for the token pool should be considered when inputting the amount.
                    For example, with 18 decimals a fractional balance of 10.234 will
                    be specified as 10,234,000,000,000,000,000
                connector:
                  description: The name of the token connector, as specified in the
                    FireFly core configuration file. Required on input when there
                    are more than one token connectors configured
                  type: string
                from:
                  description: The source account for the transfer. On input defaults
                    to the value of 'key'
                  type: string
                key:
                  description: The blockchain signing key for the transfer. On input
                    defaults to the first signing key of the organization that operates
                    the node
                  type: string
                message:
                  description: You can specify a message to correlate with the transfer,
                    which can be of type broadcast or private. Your chosen token connector
                    and on-chain smart contract must support on-chain/off-chain correlation
                    by taking a `data` input on the transfer
                  properties:
                    batch:
                      description: The UUID of the batch in which the message was
                        pinned/transferred
                    confirmed:
                      description: The timestamp of when the message was confirmed/rejected
                    data:
                      description: The list of data elements attached to the message
                      items:
                        description: The list of data elements attached to the message
                        properties:
                          hash:
                            description: The hash of the referenced data
                          id:
                            description: The UUID of the referenced data resource
                        type: object
                      type: array
                    group:
                      description: Allows you to specify details of the private group
                        of recipients in-line in the message. Alternative to using
                        the header.group to specify the hash of a group that has been
                        previously resolved
                      properties:
                        members:
                          description: An array of members of the group. If no identities
                            local to the sending node are included, then the organization
                            owner of the local node is added automatically
                          items:
                            description: An array of members of the group. If no identities
                              local to the sending node are included, then the organization
                              owner of the local node is added automatically
                            properties:
                              identity:
                                description: The DID of the group member. On input
                                  can be a UUID or org name, and will be resolved
                                  to a DID
                                type: string
                              node:
                                description: The UUID of the node that will receive
                                  a copy of the off-chain message for the identity.
                                  The first applicable node for the identity will
                                  be picked automatically on input if not specified
                                type: string
                            type: object
                          type: array
                        name:
                          description: Optional name for the group. Allows you to
                            have multiple separate groups with the same list of participants
                          type: string
                      type: object
                    hash:
                      description: The hash of the message. Derived from the header,
                        which includes the data hash
                    header:
                      description: The message header contains all fields that are
                        used to build the message hash
                      properties:
                        author:
                          description: The DID of identity of the submitter
                          type: string
                        cid:
                          description: The correlation ID of the message. Set this
                            when a message is a response to another message
                        created:
                          description: The creation time of the message
                        datahash:
                          description: A single hash representing all data in the
                            message. Derived from the array of data ids+hashes attached
                            to this message
                        group:
                          description: Private messages only - the identifier hash
                            of the privacy group. Derived from the name and member
                            list of the group
                        id:
                          description: The UUID of the message. Unique to each message
                        key:
                          description: The on-chain signing key used to sign the transaction
                          type: string
                        namespace:
                          description: The namespace of the message
                          type: string
                        tag:
                          description: The message tag indicates the purpose of the
                            message to the applications that process it
                          type: string
                        topics:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          items:
                            description: A message topic associates this message with
                              an ordered stream of data. A custom topic should be
                              assigned - using the default topic is discouraged
                            type: string
                          type: array
                        txtype:
                          description: The type of transaction used to order/deliver
                            this message
                          type: string
                        type:
                          description: The type of the message
                          enum:
                          - definition
                          - broadcast
                          - private
                          - groupinit
                          - transfer_broadcast
                          - transfer_private
                          type: string
                      type: object
                    pins:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      items:
                        description: For private messages, a unique pin hash:nonce
                          is assigned for each topic
                        type: string
                      type: array
                    state:
                      description: The current state of the message
                      enum:
                      - staged
                      - ready
                      - sent
                      - pending
                      - confirmed
                      - rejected
                      type: string
                  type: object
                pool:
                  description: The name or UUID of a token pool
                  type: string
                tokenIndex:
                  description: The index of the token within the pool that this transfer
                    applies to
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  amount:
                    description: The amount for the transfer. For non-fungible tokens
                      will always be 1. For fungible tokens, the number of decimals
                      for the token pool should be considered when inputting the amount.
                      For example, with 18 decimals a fractional balance of 10.234
                      will be specified as 10,234,000,000,000,000,000
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the transfer
                  from:
                    description: The source account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  key:
                    description: The blockchain signing key for the transfer. On input
                      defaults to the first signing key of the organization that operates
                      the node
                    type: string
                  localId:
                    description: The UUID of this token transfer, in the local FireFly
                      node
                  message:
                    description: The UUID of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  messageHash:
                    description: The hash of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  namespace:
                    description: The namespace for the transfer, which must match
                      the namespace of the token pool
                    type: string
                  pool:
                    description: The UUID the token pool this transfer applies to
                  protocolId:
                    description: A unique identifier for this transfer, as provided
                      by the token connector
                    type: string
                  to:
                    description: The target account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      transfer applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of transfer such as mint/burn/transfer
                    enum:
                    - mint
                    - burn
                    - transfer
                    type: string
                  uri:
                    description: The URI of the token this transfer applies to
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  amount:
                    description: The amount for the transfer. For non-fungible tokens
                      will always be 1. For fungible tokens, the number of decimals
                      for the token pool should be considered when inputting the amount.
                      For example, with 18 decimals a fractional balance of 10.234
                      will be specified as 10,234,000,000,000,000,000
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the transfer
                  from:
                    description: The source account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  key:
                    description: The blockchain signing key for the transfer. On input
                      defaults to the first signing key of the organization that operates
                      the node
                    type: string
                  localId:
                    description: The UUID of this token transfer, in the local FireFly
                      node
                  message:
                    description: The UUID of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  messageHash:
                    description: The hash of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  namespace:
                    description: The namespace for the transfer, which must match
                      the namespace of the token pool
                    type: string
                  pool:
                    description: The UUID the token pool this transfer applies to
                  protocolId:
                    description: A unique identifier for this transfer, as provided
                      by the token connector
                    type: string
                  to:
                    description: The target account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      transfer applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of transfer such as mint/burn/transfer
                    enum:
                    - mint
                    - burn
                    - transfer
                    type: string
                  uri:
                    description: The URI of the token this transfer applies to
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/connectors:
    get:
      description: 'TODO: Description'
      operationId: getTokenConnectors
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    name:
                      description: The name of the token connector, as configured
                        in the FireFly core configuration file
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/mint:
    post:
      description: 'TODO: Description'
      operationId: postTokenMint
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: The amount for the transfer. For non-fungible tokens
                    will always be 1. For fungible tokens, the number of decimals
                    for the token pool should be considered when inputting the amount.
                    For example, with 18 decimals a fractional balance of 10.234 will
                    be specified as 10,234,000,000,000,000,000
                connector:
                  description: The name of the token connector, as specified in the
                    FireFly core configuration file. Required on input when there
                    are more than one token connectors configured
                  type: string
                key:
                  description: The blockchain signing key for the transfer. On input
                    defaults to the first signing key of the organization that operates
                    the node
                  type: string
                message:
                  description: You can specify a message to correlate with the transfer,
                    which can be of type broadcast or private. Your chosen token connector
                    and on-chain smart contract must support on-chain/off-chain correlation
                    by taking a `data` input on the transfer
                  properties:
                    batch:
                      description: The UUID of the batch in which the message was
                        pinned/transferred
                    confirmed:
                      description: The timestamp of when the message was confirmed/rejected
                    data:
                      description: The list of data elements attached to the message
                      items:
                        description: The list of data elements attached to the message
                        properties:
                          hash:
                            description: The hash of the referenced data
                          id:
                            description: The UUID of the referenced data resource
                        type: object
                      type: array
                    group:
                      description: Allows you to specify details of the private group
                        of recipients in-line in the message. Alternative to using
                        the header.group to specify the hash of a group that has been
                        previously resolved
                      properties:
                        members:
                          description: An array of members of the group. If no identities
                            local to the sending node are included, then the organization
                            owner of the local node is added automatically
                          items:
                            description: An array of members of the group. If no identities
                              local to the sending node are included, then the organization
                              owner of the local node is added automatically
                            properties:
                              identity:
                                description: The DID of the group member. On input
                                  can be a UUID or org name, and will be resolved
                                  to a DID
                                type: string
                              node:
                                description: The UUID of the node that will receive
                                  a copy of the off-chain message for the identity.
                                  The first applicable node for the identity will
                                  be picked automatically on input if not specified
                                type: string
                            type: object
                          type: array
                        name:
                          description: Optional name for the group. Allows you to
                            have multiple separate groups with the same list of participants
                          type: string
                      type: object
                    hash:
                      description: The hash of the message. Derived from the header,
                        which includes the data hash
                    header:
                      description: The message header contains all fields that are
                        used to build the message hash
                      properties:
                        author:
                          description: The DID of identity of the submitter
                          type: string
                        cid:
                          description: The correlation ID of the message. Set this
                            when a message is a response to another message
                        created:
                          description: The creation time of the message
                        datahash:
                          description: A single hash representing all data in the
                            message. Derived from the array of data ids+hashes attached
                            to this message
                        group:
                          description: Private messages only - the identifier hash
                            of the privacy group. Derived from the name and member
                            list of the group
                        id:
                          description: The UUID of the message. Unique to each message
                        key:
                          description: The on-chain signing key used to sign the transaction
                          type: string
                        namespace:
                          description: The namespace of the message
                          type: string
                        tag:
                          description: The message tag indicates the purpose of the
                            message to the applications that process it
                          type: string
                        topics:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          items:
                            description: A message topic associates this message with
                              an ordered stream of data. A custom topic should be
                              assigned - using the default topic is discouraged
                            type: string
                          type: array
                        txtype:
                          description: The type of transaction used to order/deliver
                            this message
                          type: string
                        type:
                          description: The type of the message
                          enum:
                          - definition
                          - broadcast
                          - private
                          - groupinit
                          - transfer_broadcast
                          - transfer_private
                          type: string
                      type: object
                    pins:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      items:
                        description: For private messages, a unique pin hash:nonce
                          is assigned for each topic
                        type: string
                      type: array
                    state:
                      description: The current state of the message
                      enum:
                      - staged
                      - ready
                      - sent
                      - pending
                      - confirmed
                      - rejected
                      type: string
                  type: object
                pool:
                  description: The name or UUID of a token pool
                  type: string
                to:
                  description: The target account for the transfer. On input defaults
                    to the value of 'key'
                  type: string
                tokenIndex:
                  description: The index of the token within the pool that this transfer
                    applies to
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  amount:
                    description: The amount for the transfer. For non-fungible tokens
                      will always be 1. For fungible tokens, the number of decimals
                      for the token pool should be considered when inputting the amount.
                      For example, with 18 decimals a fractional balance of 10.234
                      will be specified as 10,234,000,000,000,000,000
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the transfer
                  from:
                    description: The source account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  key:
                    description: The blockchain signing key for the transfer. On input
                      defaults to the first signing key of the organization that operates
                      the node
                    type: string
                  localId:
                    description: The UUID of this token transfer, in the local FireFly
                      node
                  message:
                    description: The UUID of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  messageHash:
                    description: The hash of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  namespace:
                    description: The namespace for the transfer, which must match
                      the namespace of the token pool
                    type: string
                  pool:
                    description: The UUID the token pool this transfer applies to
                  protocolId:
                    description: A unique identifier for this transfer, as provided
                      by the token connector
                    type: string
                  to:
                    description: The target account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      transfer applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of transfer such as mint/burn/transfer
                    enum:
                    - mint
                    - burn
                    - transfer
                    type: string
                  uri:
                    description: The URI of the token this transfer applies to
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  amount:
                    description: The amount for the transfer. For non-fungible tokens
                      will always be 1. For fungible tokens, the number of decimals
                      for the token pool should be considered when inputting the amount.
                      For example, with 18 decimals a fractional balance of 10.234
                      will be specified as 10,234,000,000,000,000,000
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the transfer
                  from:
                    description: The source account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  key:
                    description: The blockchain signing key for the transfer. On input
                      defaults to the first signing key of the organization that operates
                      the node
                    type: string
                  localId:
                    description: The UUID of this token transfer, in the local FireFly
                      node
                  message:
                    description: The UUID of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  messageHash:
                    description: The hash of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  namespace:
                    description: The namespace for the transfer, which must match
                      the namespace of the token pool
                    type: string
                  pool:
                    description: The UUID the token pool this transfer applies to
                  protocolId:
                    description: A unique identifier for this transfer, as provided
                      by the token connector
                    type: string
                  to:
                    description: The target account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      transfer applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of transfer such as mint/burn/transfer
                    enum:
                    - mint
                    - burn
                    - transfer
                    type: string
                  uri:
                    description: The URI of the token this transfer applies to
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/pools:
    get:
      description: 'TODO: Description'
      operationId: getTokenPools
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: connector
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: message
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: protocolid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: standard
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: state
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: symbol
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    connector:
                      description: The name of the token connector, as specified in
                        the FireFly core configuration file that is responsible for
                        the token pool. Required on input when multiple token connectors
                        are configured
                      type: string
                    created:
                      description: The creation time of the pool
                    id:
                      description: The UUID of the token pool
                    info:
                      additionalProperties:
                        description: Token connector specific information about the
                          pool. See your chosen token connector documentation for
                          details
                      description: Token connector specific information about the
                        pool. See your chosen token connector documentation for details
                      type: object
                    key:
                      description: The signing key used to create the token pool.
                        On input for token connectors that support on-chain deployment
                        of new tokens (vs. only index existing ones) this determines
                        the signing key used to create the token on-chain
                      type: string
                    message:
                      description: The UUID of the broadcast message used to inform
                        the network to index this pool
                    name:
                      description: The name of the token pool. Note the name is not
                        validated against the description of the token on the blockchain
                      type: string
                    namespace:
                      description: The namespace for the token pool
                      type: string
                    protocolId:
                      description: A unique identifier for the pool, as provided by
                        the token connector
                      type: string
                    standard:
                      description: The ERC standard the token pool conforms to, as
                        reported by the token connector
                      type: string
                    state:
                      description: The current state of the token pool
                      enum:
                      - unknown
                      - pending
                      - confirmed
                      type: string
                    symbol:
                      description: The token symbol. If supplied on input for an existing
                        on-chain token, this must match the on-chain information
                      type: string
                    tx:
                      description: Reference to the FireFly transaction used to create
                        and broadcast this pool to the network
                      properties:
                        id:
                          description: The UUID of the FireFly transaction
                        type:
                          description: The type of the FireFly transaction
                          type: string
                      type: object
                    type:
                      description: The type of token the pool contains, such as fungible/non-fungible
                      enum:
                      - fungible
                      - nonfungible
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postTokenPool
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                config:
                  additionalProperties:
                    description: Input only field, with token connector specific configuration
                      of the pool, such as an existing Ethereum address and block
                      number to used to index the pool. See your chosen token connector
                      documentation for details
                  description: Input only field, with token connector specific configuration
                    of the pool, such as an existing Ethereum address and block number
                    to used to index the pool. See your chosen token connector documentation
                    for details
                  type: object
                connector:
                  description: The name of the token connector, as specified in the
                    FireFly core configuration file that is responsible for the token
                    pool. Required on input when multiple token connectors are configured
                  type: string
                key:
                  description: The signing key used to create the token pool. On input
                    for token connectors that support on-chain deployment of new tokens
                    (vs. only index existing ones) this determines the signing key
                    used to create the token on-chain
                  type: string
                name:
                  description: The name of the token pool. Note the name is not validated
                    against the description of the token on the blockchain
                  type: string
                symbol:
                  description: The token symbol. If supplied on input for an existing
                    on-chain token, this must match the on-chain information
                  type: string
                type:
                  description: The type of token the pool contains, such as fungible/non-fungible
                  enum:
                  - fungible
                  - nonfungible
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file that is responsible for
                      the token pool. Required on input when multiple token connectors
                      are configured
                    type: string
                  created:
                    description: The creation time of the pool
                  id:
                    description: The UUID of the token pool
                  info:
                    additionalProperties:
                      description: Token connector specific information about the
                        pool. See your chosen token connector documentation for details
                    description: Token connector specific information about the pool.
                      See your chosen token connector documentation for details
                    type: object
                  key:
                    description: The signing key used to create the token pool. On
                      input for token connectors that support on-chain deployment
                      of new tokens (vs. only index existing ones) this determines
                      the signing key used to create the token on-chain
                    type: string
                  message:
                    description: The UUID of the broadcast message used to inform
                      the network to index this pool
                  name:
                    description: The name of the token pool. Note the name is not
                      validated against the description of the token on the blockchain
                    type: string
                  namespace:
                    description: The namespace for the token pool
                    type: string
                  protocolId:
                    description: A unique identifier for the pool, as provided by
                      the token connector
                    type: string
                  standard:
                    description: The ERC standard the token pool conforms to, as reported
                      by the token connector
                    type: string
                  state:
                    description: The current state of the token pool
                    enum:
                    - unknown
                    - pending
                    - confirmed
                    type: string
                  symbol:
                    description: The token symbol. If supplied on input for an existing
                      on-chain token, this must match the on-chain information
                    type: string
                  tx:
                    description: Reference to the FireFly transaction used to create
                      and broadcast this pool to the network
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of token the pool contains, such as fungible/non-fungible
                    enum:
                    - fungible
                    - nonfungible
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file that is responsible for
                      the token pool. Required on input when multiple token connectors
                      are configured
                    type: string
                  created:
                    description: The creation time of the pool
                  id:
                    description: The UUID of the token pool
                  info:
                    additionalProperties:
                      description: Token connector specific information about the
                        pool. See your chosen token connector documentation for details
                    description: Token connector specific information about the pool.
                      See your chosen token connector documentation for details
                    type: object
                  key:
                    description: The signing key used to create the token pool. On
                      input for token connectors that support on-chain deployment
                      of new tokens (vs. only index existing ones) this determines
                      the signing key used to create the token on-chain
                    type: string
                  message:
                    description: The UUID of the broadcast message used to inform
                      the network to index this pool
                  name:
                    description: The name of the token pool. Note the name is not
                      validated against the description of the token on the blockchain
                    type: string
                  namespace:
                    description: The namespace for the token pool
                    type: string
                  protocolId:
                    description: A unique identifier for the pool, as provided by
                      the token connector
                    type: string
                  standard:
                    description: The ERC standard the token pool conforms to, as reported
                      by the token connector
                    type: string
                  state:
                    description: The current state of the token pool
                    enum:
                    - unknown
                    - pending
                    - confirmed
                    type: string
                  symbol:
                    description: The token symbol. If supplied on input for an existing
                      on-chain token, this must match the on-chain information
                    type: string
                  tx:
                    description: Reference to the FireFly transaction used to create
                      and broadcast this pool to the network
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of token the pool contains, such as fungible/non-fungible
                    enum:
                    - fungible
                    - nonfungible
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/pools/{nameOrId}:
    get:
      description: 'TODO: Description'
      operationId: getTokenPoolByNameOrID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file that is responsible for
                      the token pool. Required on input when multiple token connectors
                      are configured
                    type: string
                  created:
                    description: The creation time of the pool
                  id:
                    description: The UUID of the token pool
                  info:
                    additionalProperties:
                      description: Token connector specific information about the
                        pool. See your chosen token connector documentation for details
                    description: Token connector specific information about the pool.
                      See your chosen token connector documentation for details
                    type: object
                  key:
                    description: The signing key used to create the token pool. On
                      input for token connectors that support on-chain deployment
                      of new tokens (vs. only index existing ones) this determines
                      the signing key used to create the token on-chain
                    type: string
                  message:
                    description: The UUID of the broadcast message used to inform
                      the network to index this pool
                  name:
                    description: The name of the token pool. Note the name is not
                      validated against the description of the token on the blockchain
                    type: string
                  namespace:
                    description: The namespace for the token pool
                    type: string
                  protocolId:
                    description: A unique identifier for the pool, as provided by
                      the token connector
                    type: string
                  standard:
                    description: The ERC standard the token pool conforms to, as reported
                      by the token connector
                    type: string
                  state:
                    description: The current state of the token pool
                    enum:
                    - unknown
                    - pending
                    - confirmed
                    type: string
                  symbol:
                    description: The token symbol. If supplied on input for an existing
                      on-chain token, this must match the on-chain information
                    type: string
                  tx:
                    description: Reference to the FireFly transaction used to create
                      and broadcast this pool to the network
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of token the pool contains, such as fungible/non-fungible
                    enum:
                    - fungible
                    - nonfungible
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/transfers:
    get:
      description: 'TODO: Description'
      operationId: getTokenTransfers
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: query
        name: fromOrTo
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: amount
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blockchainevent
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: connector
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: from
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: key
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: localid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: message
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messagehash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: pool
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: protocolid
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: to
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tokenindex
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: tx.type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: uri
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    amount:
                      description: The amount for the transfer. For non-fungible tokens
                        will always be 1. For fungible tokens, the number of decimals
                        for the token pool should be considered when inputting the
                        amount. For example, with 18 decimals a fractional balance
                        of 10.234 will be specified as 10,234,000,000,000,000,000
                    blockchainEvent:
                      description: The UUID of the blockchain event
                    connector:
                      description: The name of the token connector, as specified in
                        the FireFly core configuration file. Required on input when
                        there are more than one token connectors configured
                      type: string
                    created:
                      description: The creation time of the transfer
                    from:
                      description: The source account for the transfer. On input defaults
                        to the value of 'key'
                      type: string
                    key:
                      description: The blockchain signing key for the transfer. On
                        input defaults to the first signing key of the organization
                        that operates the node
                      type: string
                    localId:
                      description: The UUID of this token transfer, in the local FireFly
                        node
                    message:
                      description: The UUID of a message that has been correlated
                        with this transfer using the data field of the transfer in
                        a compatible token connector
                    messageHash:
                      description: The hash of a message that has been correlated
                        with this transfer using the data field of the transfer in
                        a compatible token connector
                    namespace:
                      description: The namespace for the transfer, which must match
                        the namespace of the token pool
                      type: string
                    pool:
                      description: The UUID the token pool this transfer applies to
                    protocolId:
                      description: A unique identifier for this transfer, as provided
                        by the token connector
                      type: string
                    to:
                      description: The target account for the transfer. On input defaults
                        to the value of 'key'
                      type: string
                    tokenIndex:
                      description: The index of the token within the pool that this
                        transfer applies to
                      type: string
                    tx:
                      description: If submitted via FireFly, this will reference the
                        UUID of the FireFly transaction (if the token connector in
                        use supports attaching data)
                      properties:
                        id:
                          description: The UUID of the FireFly transaction
                        type:
                          description: The type of the FireFly transaction
                          type: string
                      type: object
                    type:
                      description: The type of transfer such as mint/burn/transfer
                      enum:
                      - mint
                      - burn
                      - transfer
                      type: string
                    uri:
                      description: The URI of the token this transfer applies to
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postTokenTransfer
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: The amount for the transfer. For non-fungible tokens
                    will always be 1. For fungible tokens, the number of decimals
                    for the token pool should be considered when inputting the amount.
                    For example, with 18 decimals a fractional balance of 10.234 will
                    be specified as 10,234,000,000,000,000,000
                connector:
                  description: The name of the token connector, as specified in the
                    FireFly core configuration file. Required on input when there
                    are more than one token connectors configured
                  type: string
                from:
                  description: The source account for the transfer. On input defaults
                    to the value of 'key'
                  type: string
                key:
                  description: The blockchain signing key for the transfer. On input
                    defaults to the first signing key of the organization that operates
                    the node
                  type: string
                message:
                  description: You can specify a message to correlate with the transfer,
                    which can be of type broadcast or private. Your chosen token connector
                    and on-chain smart contract must support on-chain/off-chain correlation
                    by taking a `data` input on the transfer
                  properties:
                    batch:
                      description: The UUID of the batch in which the message was
                        pinned/transferred
                    confirmed:
                      description: The timestamp of when the message was confirmed/rejected
                    data:
                      description: The list of data elements attached to the message
                      items:
                        description: The list of data elements attached to the message
                        properties:
                          hash:
                            description: The hash of the referenced data
                          id:
                            description: The UUID of the referenced data resource
                        type: object
                      type: array
                    group:
                      description: Allows you to specify details of the private group
                        of recipients in-line in the message. Alternative to using
                        the header.group to specify the hash of a group that has been
                        previously resolved
                      properties:
                        members:
                          description: An array of members of the group. If no identities
                            local to the sending node are included, then the organization
                            owner of the local node is added automatically
                          items:
                            description: An array of members of the group. If no identities
                              local to the sending node are included, then the organization
                              owner of the local node is added automatically
                            properties:
                              identity:
                                description: The DID of the group member. On input
                                  can be a UUID or org name, and will be resolved
                                  to a DID
                                type: string
                              node:
                                description: The UUID of the node that will receive
                                  a copy of the off-chain message for the identity.
                                  The first applicable node for the identity will
                                  be picked automatically on input if not specified
                                type: string
                            type: object
                          type: array
                        name:
                          description: Optional name for the group. Allows you to
                            have multiple separate groups with the same list of participants
                          type: string
                      type: object
                    hash:
                      description: The hash of the message. Derived from the header,
                        which includes the data hash
                    header:
                      description: The message header contains all fields that are
                        used to build the message hash
                      properties:
                        author:
                          description: The DID of identity of the submitter
                          type: string
                        cid:
                          description: The correlation ID of the message. Set this
                            when a message is a response to another message
                        created:
                          description: The creation time of the message
                        datahash:
                          description: A single hash representing all data in the
                            message. Derived from the array of data ids+hashes attached
                            to this message
                        group:
                          description: Private messages only - the identifier hash
                            of the privacy group. Derived from the name and member
                            list of the group
                        id:
                          description: The UUID of the message. Unique to each message
                        key:
                          description: The on-chain signing key used to sign the transaction
                          type: string
                        namespace:
                          description: The namespace of the message
                          type: string
                        tag:
                          description: The message tag indicates the purpose of the
                            message to the applications that process it
                          type: string
                        topics:
                          description: A message topic associates this message with
                            an ordered stream of data. A custom topic should be assigned
                            - using the default topic is discouraged
                          items:
                            description: A message topic associates this message with
                              an ordered stream of data. A custom topic should be
                              assigned - using the default topic is discouraged
                            type: string
                          type: array
                        txtype:
                          description: The type of transaction used to order/deliver
                            this message
                          type: string
                        type:
                          description: The type of the message
                          enum:
                          - definition
                          - broadcast
                          - private
                          - groupinit
                          - transfer_broadcast
                          - transfer_private
                          type: string
                      type: object
                    pins:
                      description: For private messages, a unique pin hash:nonce is
                        assigned for each topic
                      items:
                        description: For private messages, a unique pin hash:nonce
                          is assigned for each topic
                        type: string
                      type: array
                    state:
                      description: The current state of the message
                      enum:
                      - staged
                      - ready
                      - sent
                      - pending
                      - confirmed
                      - rejected
                      type: string
                  type: object
                pool:
                  description: The name or UUID of a token pool
                  type: string
                to:
                  description: The target account for the transfer. On input defaults
                    to the value of 'key'
                  type: string
                tokenIndex:
                  description: The index of the token within the pool that this transfer
                    applies to
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  amount:
                    description: The amount for the transfer. For non-fungible tokens
                      will always be 1. For fungible tokens, the number of decimals
                      for the token pool should be considered when inputting the amount.
                      For example, with 18 decimals a fractional balance of 10.234
                      will be specified as 10,234,000,000,000,000,000
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the transfer
                  from:
                    description: The source account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  key:
                    description: The blockchain signing key for the transfer. On input
                      defaults to the first signing key of the organization that operates
                      the node
                    type: string
                  localId:
                    description: The UUID of this token transfer, in the local FireFly
                      node
                  message:
                    description: The UUID of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  messageHash:
                    description: The hash of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  namespace:
                    description: The namespace for the transfer, which must match
                      the namespace of the token pool
                    type: string
                  pool:
                    description: The UUID the token pool this transfer applies to
                  protocolId:
                    description: A unique identifier for this transfer, as provided
                      by the token connector
                    type: string
                  to:
                    description: The target account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      transfer applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of transfer such as mint/burn/transfer
                    enum:
                    - mint
                    - burn
                    - transfer
                    type: string
                  uri:
                    description: The URI of the token this transfer applies to
                    type: string
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  amount:
                    description: The amount for the transfer. For non-fungible tokens
                      will always be 1. For fungible tokens, the number of decimals
                      for the token pool should be considered when inputting the amount.
                      For example, with 18 decimals a fractional balance of 10.234
                      will be specified as 10,234,000,000,000,000,000
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the transfer
                  from:
                    description: The source account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  key:
                    description: The blockchain signing key for the transfer. On input
                      defaults to the first signing key of the organization that operates
                      the node
                    type: string
                  localId:
                    description: The UUID of this token transfer, in the local FireFly
                      node
                  message:
                    description: The UUID of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  messageHash:
                    description: The hash of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  namespace:
                    description: The namespace for the transfer, which must match
                      the namespace of the token pool
                    type: string
                  pool:
                    description: The UUID the token pool this transfer applies to
                  protocolId:
                    description: A unique identifier for this transfer, as provided
                      by the token connector
                    type: string
                  to:
                    description: The target account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      transfer applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of transfer such as mint/burn/transfer
                    enum:
                    - mint
                    - burn
                    - transfer
                    type: string
                  uri:
                    description: The URI of the token this transfer applies to
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/tokens/transfers/{transferId}:
    get:
      description: 'TODO: Description'
      operationId: getTokenTransferByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: transferId
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  amount:
                    description: The amount for the transfer. For non-fungible tokens
                      will always be 1. For fungible tokens, the number of decimals
                      for the token pool should be considered when inputting the amount.
                      For example, with 18 decimals a fractional balance of 10.234
                      will be specified as 10,234,000,000,000,000,000
                  blockchainEvent:
                    description: The UUID of the blockchain event
                  connector:
                    description: The name of the token connector, as specified in
                      the FireFly core configuration file. Required on input when
                      there are more than one token connectors configured
                    type: string
                  created:
                    description: The creation time of the transfer
                  from:
                    description: The source account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  key:
                    description: The blockchain signing key for the transfer. On input
                      defaults to the first signing key of the organization that operates
                      the node
                    type: string
                  localId:
                    description: The UUID of this token transfer, in the local FireFly
                      node
                  message:
                    description: The UUID of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  messageHash:
                    description: The hash of a message that has been correlated with
                      this transfer using the data field of the transfer in a compatible
                      token connector
                  namespace:
                    description: The namespace for the transfer, which must match
                      the namespace of the token pool
                    type: string
                  pool:
                    description: The UUID the token pool this transfer applies to
                  protocolId:
                    description: A unique identifier for this transfer, as provided
                      by the token connector
                    type: string
                  to:
                    description: The target account for the transfer. On input defaults
                      to the value of 'key'
                    type: string
                  tokenIndex:
                    description: The index of the token within the pool that this
                      transfer applies to
                    type: string
                  tx:
                    description: If submitted via FireFly, this will reference the
                      UUID of the FireFly transaction (if the token connector in use
                      supports attaching data)
                    properties:
                      id:
                        description: The UUID of the FireFly transaction
                      type:
                        description: The type of the FireFly transaction
                        type: string
                    type: object
                  type:
                    description: The type of transfer such as mint/burn/transfer
                    enum:
                    - mint
                    - burn
                    - transfer
                    type: string
                  uri:
                    description: The URI of the token this transfer applies to
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/transactions:
    get:
      description: 'TODO: Description'
      operationId: getTxns
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blockchainids
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    blockchainIds:
                      description: The blockchain transaction ID, in the format specific
                        to the blockchain involved in the transaction. Not all FireFly
                        transactions include a blockchain. FireFly transactions are
                        extensible to support multiple blockchain transactions
                      items:
                        description: The blockchain transaction ID, in the format
                          specific to the blockchain involved in the transaction.
                          Not all FireFly transactions include a blockchain. FireFly
                          transactions are extensible to support multiple blockchain
                          transactions
                        type: string
                      type: array
                    created:
                      description: The time the transaction was created on this node.
                        Note the transaction is individually created with the same
                        UUID on each participant in the FireFly transaction
                    id:
                      description: The UUID of the FireFly transaction
                    namespace:
                      description: The namespace of the FireFly transaction
                      type: string
                    type:
                      description: The type of the FireFly transaction
                      enum:
                      - none
                      - unpinned
                      - batch_pin
                      - token_pool
                      - token_transfer
                      - contract_invoke
                      - token_approval
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/transactions/{txnid}:
    get:
      description: 'TODO: Description'
      operationId: getTxnByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: txnid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: blockchainids
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  blockchainIds:
                    description: The blockchain transaction ID, in the format specific
                      to the blockchain involved in the transaction. Not all FireFly
                      transactions include a blockchain. FireFly transactions are
                      extensible to support multiple blockchain transactions
                    items:
                      description: The blockchain transaction ID, in the format specific
                        to the blockchain involved in the transaction. Not all FireFly
                        transactions include a blockchain. FireFly transactions are
                        extensible to support multiple blockchain transactions
                      type: string
                    type: array
                  created:
                    description: The time the transaction was created on this node.
                      Note the transaction is individually created with the same UUID
                      on each participant in the FireFly transaction
                  id:
                    description: The UUID of the FireFly transaction
                  namespace:
                    description: The namespace of the FireFly transaction
                    type: string
                  type:
                    description: The type of the FireFly transaction
                    enum:
                    - none
                    - unpinned
                    - batch_pin
                    - token_pool
                    - token_transfer
                    - contract_invoke
                    - token_approval
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/transactions/{txnid}/blockchainevents:
    get:
      description: 'TODO: Description'
      operationId: getTxnBlockchainEvents
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: txnid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    id:
                      description: The UUID assigned to the event by FireFly
                    info:
                      additionalProperties:
                        description: Detailed blockchain specific information about
                          the event, as generated by the blockchain connector
                      description: Detailed blockchain specific information about
                        the event, as generated by the blockchain connector
                      type: object
                    listener:
                      description: The UUID of the listener that detected this event,
                        or nil for built-in events in the system namespace
                    name:
                      description: The name of the event in the blockchain smart contract
                      type: string
                    namespace:
                      description: The namespace of the listener that detected this
                        blockchain event
                      type: string
                    output:
                      additionalProperties:
                        description: The data output by the event, parsed to JSON
                          according to the interface of the smart contract
                      description: The data output by the event, parsed to JSON according
                        to the interface of the smart contract
                      type: object
                    protocolId:
                      description: A alphanumerically sortable string that represents
                        this event uniquely on the blockchain. Convention for plugins
                        is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX
                      type: string
                    source:
                      description: The blockchain plugin or token service that detected
                        the event
                      type: string
                    timestamp:
                      description: The time allocated to this event by the blockchain.
                        This is the block timestamp for most blockchain connectors
                    tx:
                      description: If this blockchain event is coorelated to FireFly
                        transaction such as a FireFly submitted token transfer, this
                        field is set to the UUID of the FireFly transaction
                      properties:
                        id:
                          description: The UUID of the FireFly transaction
                        type:
                          description: The type of the FireFly transaction
                          type: string
                      type: object
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/transactions/{txnid}/operations:
    get:
      description: 'TODO: Description'
      operationId: getTxnOps
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: txnid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The time the operation was created
                    error:
                      description: Any error reported back from the plugin for this
                        operation
                      type: string
                    id:
                      description: The UUID of the operation
                    input:
                      additionalProperties:
                        description: The input to this operation
                      description: The input to this operation
                      type: object
                    namespace:
                      description: The namespace of the operation
                      type: string
                    output:
                      additionalProperties:
                        description: Any output reported back from the plugin for
                          this operation
                      description: Any output reported back from the plugin for this
                        operation
                      type: object
                    plugin:
                      description: The plugin responsible for performing the operation
                      type: string
                    retry:
                      description: If this operation was initiated as a retry to a
                        previous operation, this field points to the UUID of the operation
                        being retried
                    status:
                      description: The current status of the operation
                      type: string
                    tx:
                      description: The UUID of the FireFly transaction the operation
                        is part of
                    type:
                      description: The type of the operation
                      enum:
                      - blockchain_pin_batch
                      - blockchain_invoke
                      - sharedstorage_upload_batch
                      - sharedstorage_upload_blob
                      - sharedstorage_download_batch
                      - sharedstorage_download_blob
                      - dataexchange_send_batch
                      - dataexchange_send_blob
                      - token_create_pool
                      - token_activate_pool
                      - token_transfer
                      - token_approval
                      type: string
                    updated:
                      description: The last update time of the operation
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/transactions/{txnid}/status:
    get:
      description: 'TODO: Description'
      operationId: getTxnStatus
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: txnid
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  details:
                    description: A set of records describing the activities within
                      the transaction known by the local FireFly node
                    items:
                      description: A set of records describing the activities within
                        the transaction known by the local FireFly node
                      properties:
                        error:
                          description: If an error occurred related to the detail
                            entry, it is included here
                          type: string
                        id:
                          description: The UUID of the entry referenced by this detail.
                            The type of this record can be inferred from the entry
                            type
                        info:
                          additionalProperties:
                            description: Output details for this entry
                          description: Output details for this entry
                          type: object
                        status:
                          description: The status of the detail record. Cases where
                            an event is required for completion, but has not arrived
                            yet are marked with a 'pending' record
                          type: string
                        subtype:
                          description: A sub-type, such as an operation type, or an
                            event type
                          type: string
                        timestamp:
                          description: The time relevant to when the record was updated,
                            such as the time an event was created, or the last update
                            time of an operation
                        type:
                          description: The type of the transaction status detail record
                          type: string
                      type: object
                    type: array
                  status:
                    description: The overall computed status of the transaction, after
                      analyzing the details during the API call
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /namespaces/{ns}/verifiers:
    get:
      description: 'TODO: Description'
      operationId: getVerifiers
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: identity
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: value
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The time this verifier was created on this node
                    hash:
                      description: Hash used as a globally consistent identifier for
                        this namespace + type + value combination on every node in
                        the network
                    identity:
                      description: The UUID of the parent identity that has claimed
                        this verifier
                    namespace:
                      description: The namespace of the verifier
                      type: string
                    type:
                      description: The type of the verifier
                      enum:
                      - ethereum_address
                      - fabric_msp_id
                      - dx_peer_id
                      type: string
                    value:
                      description: The verifier string, such as an Ethereum address,
                        or Fabric MSP identifier
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /namespaces/{ns}/verifiers/{vid}:
    get:
      description: 'TODO: Description'
      operationId: getVerifierByID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: ns
        required: true
        schema:
          example: default
          type: string
      - description: 'TODO: Description'
        in: path
        name: vid
        required: true
        schema:
          example: id
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The time this verifier was created on this node
                  hash:
                    description: Hash used as a globally consistent identifier for
                      this namespace + type + value combination on every node in the
                      network
                  identity:
                    description: The UUID of the parent identity that has claimed
                      this verifier
                  namespace:
                    description: The namespace of the verifier
                    type: string
                  type:
                    description: The type of the verifier
                    enum:
                    - ethereum_address
                    - fabric_msp_id
                    - dx_peer_id
                    type: string
                  value:
                    description: The verifier string, such as an Ethereum address,
                      or Fabric MSP identifier
                    type: string
                type: object
          description: Success
        default:
          description: ""
  /network/diddocs/{did}:
    get:
      description: 'TODO: Description'
      operationId: getDIDDocByDID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: did
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  '@context':
                    description: See https://www.w3.org/TR/did-core/#json-ld
                    items:
                      description: See https://www.w3.org/TR/did-core/#json-ld
                      type: string
                    type: array
                  authentication:
                    description: See https://www.w3.org/TR/did-core/#did-document-properties
                    items:
                      description: See https://www.w3.org/TR/did-core/#did-document-properties
                      type: string
                    type: array
                  id:
                    description: See https://www.w3.org/TR/did-core/#did-document-properties
                    type: string
                  verificationMethod:
                    description: See https://www.w3.org/TR/did-core/#did-document-properties
                    items:
                      description: See https://www.w3.org/TR/did-core/#did-document-properties
                      properties:
                        blockchainAcountId:
                          description: For blockchains like Ethereum that represent
                            signing identities directly by their public key summarized
                            in an account string
                          type: string
                        controller:
                          description: See https://www.w3.org/TR/did-core/#service-properties
                          type: string
                        dataExchangePeerID:
                          description: A string provided by your Data Exchange plugin,
                            that it uses a technology specific mechanism to validate
                            against when messages arrive from this identity
                          type: string
                        id:
                          description: See https://www.w3.org/TR/did-core/#service-properties
                          type: string
                        mspIdentityString:
                          description: For Hyperledger Fabric where the signing identity
                            is represented by an MSP identifier (containing X509 certificate
                            DN strings) that were validated by your local MSP
                          type: string
                        type:
                          description: See https://www.w3.org/TR/did-core/#service-properties
                          type: string
                      type: object
                    type: array
                type: object
          description: Success
        default:
          description: ""
  /network/identities:
    get:
      description: 'TODO: Description'
      operationId: getNetworkIdentities
      parameters:
      - description: 'TODO: Description'
        in: query
        name: fetchverifiers
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: description
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: did
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.claim
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.update
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.verification
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: parent
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: profile
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The creation time of the identity
                    description:
                      description: A description of the identity. Part of the updatable
                        profile information of an identity
                      type: string
                    did:
                      description: The DID of the identity. Unique across namespaces
                        within a FireFly network
                      type: string
                    id:
                      description: The UUID of the identity
                    messages:
                      description: References to the broadcast messages that established
                        this identity and proved ownership of the associated verifiers
                        (keys)
                      properties:
                        claim:
                          description: The UUID of claim message
                        update:
                          description: The UUID of the most recently applied update
                            message. Unset if no updates have been confirmed
                        verification:
                          description: The UUID of claim message. Unset for root organization
                            identities
                      type: object
                    name:
                      description: The name of the identity. The name must be unique
                        within the type and namespace
                      type: string
                    namespace:
                      description: The namespace of the identity. Organization and
                        node identities are always defined in the ff_system namespace
                      type: string
                    parent:
                      description: The UUID of the parent identity. Unset for root
                        organization identities
                    profile:
                      additionalProperties:
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                      type: object
                    type:
                      description: The type of the identity
                      enum:
                      - org
                      - node
                      - custom
                      type: string
                    updated:
                      description: The last update time of the identity profile
                    verifiers:
                      description: The verifiers, such as blockchain signing keys,
                        that have been bound to this identity and can be used to prove
                        data orignates from that identity
                      items:
                        description: The verifiers, such as blockchain signing keys,
                          that have been bound to this identity and can be used to
                          prove data orignates from that identity
                        properties:
                          type:
                            description: The type of the verifier
                            enum:
                            - ethereum_address
                            - fabric_msp_id
                            - dx_peer_id
                            type: string
                          value:
                            description: The verifier string, such as an Ethereum
                              address, or Fabric MSP identifier
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /network/identities/{did}:
    get:
      description: 'TODO: Description'
      operationId: getIdentityByDID
      parameters:
      - description: 'TODO: Description'
        in: path
        name: did
        required: true
        schema:
          type: string
      - description: 'TODO: Description'
        in: query
        name: fetchverifiers
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                  verifiers:
                    description: The verifiers, such as blockchain signing keys, that
                      have been bound to this identity and can be used to prove data
                      orignates from that identity
                    items:
                      description: The verifiers, such as blockchain signing keys,
                        that have been bound to this identity and can be used to prove
                        data orignates from that identity
                      properties:
                        type:
                          description: The type of the verifier
                          enum:
                          - ethereum_address
                          - fabric_msp_id
                          - dx_peer_id
                          type: string
                        value:
                          description: The verifier string, such as an Ethereum address,
                            or Fabric MSP identifier
                          type: string
                      type: object
                    type: array
                type: object
          description: Success
        default:
          description: ""
  /network/nodes:
    get:
      description: 'TODO: Description'
      operationId: getNetworkNodes
      parameters:
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: description
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: did
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.claim
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.update
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.verification
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: parent
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: profile
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The creation time of the identity
                    description:
                      description: A description of the identity. Part of the updatable
                        profile information of an identity
                      type: string
                    did:
                      description: The DID of the identity. Unique across namespaces
                        within a FireFly network
                      type: string
                    id:
                      description: The UUID of the identity
                    messages:
                      description: References to the broadcast messages that established
                        this identity and proved ownership of the associated verifiers
                        (keys)
                      properties:
                        claim:
                          description: The UUID of claim message
                        update:
                          description: The UUID of the most recently applied update
                            message. Unset if no updates have been confirmed
                        verification:
                          description: The UUID of claim message. Unset for root organization
                            identities
                      type: object
                    name:
                      description: The name of the identity. The name must be unique
                        within the type and namespace
                      type: string
                    namespace:
                      description: The namespace of the identity. Organization and
                        node identities are always defined in the ff_system namespace
                      type: string
                    parent:
                      description: The UUID of the parent identity. Unset for root
                        organization identities
                    profile:
                      additionalProperties:
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                      type: object
                    type:
                      description: The type of the identity
                      enum:
                      - org
                      - node
                      - custom
                      type: string
                    updated:
                      description: The last update time of the identity profile
                  type: object
                type: array
          description: Success
        default:
          description: ""
  /network/nodes/{nameOrId}:
    get:
      description: 'TODO: Description'
      operationId: getNetworkNode
      parameters:
      - description: 'TODO: Description'
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        default:
          description: ""
  /network/nodes/self:
    post:
      description: 'TODO: Description'
      operationId: postNodesSelf
      parameters:
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        default:
          description: ""
  /network/organizations:
    get:
      description: 'TODO: Description'
      operationId: getNetworkOrgs
      parameters:
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: description
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: did
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: id
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.claim
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.update
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: messages.verification
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: name
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: namespace
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: parent
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: profile
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: type
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: updated
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created:
                      description: The creation time of the identity
                    description:
                      description: A description of the identity. Part of the updatable
                        profile information of an identity
                      type: string
                    did:
                      description: The DID of the identity. Unique across namespaces
                        within a FireFly network
                      type: string
                    id:
                      description: The UUID of the identity
                    messages:
                      description: References to the broadcast messages that established
                        this identity and proved ownership of the associated verifiers
                        (keys)
                      properties:
                        claim:
                          description: The UUID of claim message
                        update:
                          description: The UUID of the most recently applied update
                            message. Unset if no updates have been confirmed
                        verification:
                          description: The UUID of claim message. Unset for root organization
                            identities
                      type: object
                    name:
                      description: The name of the identity. The name must be unique
                        within the type and namespace
                      type: string
                    namespace:
                      description: The namespace of the identity. Organization and
                        node identities are always defined in the ff_system namespace
                      type: string
                    parent:
                      description: The UUID of the parent identity. Unset for root
                        organization identities
                    profile:
                      additionalProperties:
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                      type: object
                    type:
                      description: The type of the identity
                      enum:
                      - org
                      - node
                      - custom
                      type: string
                    updated:
                      description: The last update time of the identity profile
                  type: object
                type: array
          description: Success
        default:
          description: ""
    post:
      description: 'TODO: Description'
      operationId: postNewOrganization
      parameters:
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: A description of the identity. Part of the updatable
                    profile information of an identity
                  type: string
                key:
                  description: The blockchain signing key to use to make the claim
                    to the identity. Must be available to the local node to sign the
                    identity claim. Will become a verifier on the established identity
                  type: string
                name:
                  description: The name of the identity. The name must be unique within
                    the type and namespace
                  type: string
                parent:
                  description: On input the parent can be specified directly as the
                    UUID of and existing identity, or as a DID to resolve to that
                    identity, or an organization name. The parent must already have
                    been registered, and its blockchain signing key must be available
                    to the local node to sign the verification
                  type: string
                profile:
                  additionalProperties:
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                  description: A set of metadata for the identity. Part of the updatable
                    profile information of an identity
                  type: object
                type:
                  description: The type of the identity
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        default:
          description: ""
  /network/organizations/{nameOrId}:
    get:
      description: 'TODO: Description'
      operationId: getNetworkOrg
      parameters:
      - description: 'TODO: Description'
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        default:
          description: ""
  /network/organizations/self:
    post:
      description: 'TODO: Description'
      operationId: postNewOrganizationSelf
      parameters:
      - description: When true the HTTP request blocks until the message is confirmed
        in: query
        name: confirm
        schema:
          example: "true"
          type: string
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        "202":
          content:
            application/json:
              schema:
                properties:
                  created:
                    description: The creation time of the identity
                  description:
                    description: A description of the identity. Part of the updatable
                      profile information of an identity
                    type: string
                  did:
                    description: The DID of the identity. Unique across namespaces
                      within a FireFly network
                    type: string
                  id:
                    description: The UUID of the identity
                  messages:
                    description: References to the broadcast messages that established
                      this identity and proved ownership of the associated verifiers
                      (keys)
                    properties:
                      claim:
                        description: The UUID of claim message
                      update:
                        description: The UUID of the most recently applied update
                          message. Unset if no updates have been confirmed
                      verification:
                        description: The UUID of claim message. Unset for root organization
                          identities
                    type: object
                  name:
                    description: The name of the identity. The name must be unique
                      within the type and namespace
                    type: string
                  namespace:
                    description: The namespace of the identity. Organization and node
                      identities are always defined in the ff_system namespace
                    type: string
                  parent:
                    description: The UUID of the parent identity. Unset for root organization
                      identities
                  profile:
                    additionalProperties:
                      description: A set of metadata for the identity. Part of the
                        updatable profile information of an identity
                    description: A set of metadata for the identity. Part of the updatable
                      profile information of an identity
                    type: object
                  type:
                    description: The type of the identity
                    enum:
                    - org
                    - node
                    - custom
                    type: string
                  updated:
                    description: The last update time of the identity profile
                type: object
          description: Success
        default:
          description: ""
  /status:
    get:
      description: 'TODO: Description'
      operationId: getStatus
      parameters:
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  defaults:
                    description: Information about defaults configured on this node
                      that appplications might need to query on startup
                    properties:
                      namespace:
                        description: The default namespace on this node
                        type: string
                    type: object
                  node:
                    description: Details of the local node
                    properties:
                      id:
                        description: The UUID of the node, if registered
                      name:
                        description: The name of this node, as specified in the local
                          configuration
                        type: string
                      registered:
                        description: Whether the node has been successfully registered
                        type: boolean
                    type: object
                  org:
                    description: Details of the organization identity that operates
                      this node
                    properties:
                      did:
                        description: The DID of the organization identity, if registered
                        type: string
                      id:
                        description: The UUID of the organization, if registered
                      name:
                        description: The name of the node operator organization, as
                          specified in the local configuration
                        type: string
                      registered:
                        description: Whether the organization has been successfully
                          registered
                        type: boolean
                      verifiers:
                        description: Array of verifiers (blockchain keys) owned by
                          this identity
                        items:
                          description: Array of verifiers (blockchain keys) owned
                            by this identity
                          properties:
                            type:
                              description: The type of the verifier
                              enum:
                              - ethereum_address
                              - fabric_msp_id
                              - dx_peer_id
                              type: string
                            value:
                              description: The verifier string, such as an Ethereum
                                address, or Fabric MSP identifier
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
          description: Success
        default:
          description: ""
  /status/batchmanager:
    get:
      description: 'TODO: Description'
      operationId: getStatusBatchManager
      parameters:
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  processors:
                    description: An array of currently active batch processors
                    items:
                      description: An array of currently active batch processors
                      properties:
                        dispatcher:
                          description: The type of dispatcher for this processor
                          type: string
                        name:
                          description: The name of the processor, which includes details
                            of the attributes of message are allocated to this processor
                          type: string
                        status:
                          description: The flush status for this batch processor
                          properties:
                            averageBatchBytes:
                              description: The average byte size of each batch
                              format: int64
                              type: integer
                            averageBatchData:
                              description: The average number of data attachments
                                included in each batch
                              format: double
                              type: number
                            averageBatchMessages:
                              description: The average number of messages included
                                in each batch
                              format: double
                              type: number
                            averageFlushTimeMS:
                              description: The average amount of time spent flushing
                                each batch
                              format: int64
                              type: integer
                            blocked:
                              description: True if the batch flush is in a retry loop,
                                due to errors being returned by the plugins
                              type: boolean
                            flushing:
                              description: If a flush is in progress, this is the
                                UUID of the batch being flushed
                            lastFlushError:
                              description: The last error received by this batch processor
                                while flushing
                              type: string
                            lastFlushErrorTime:
                              description: The time of the last flush
                            lastFlushStartTime:
                              description: The last time a flush was performed
                            totalBatches:
                              description: The total count of batches flushed by this
                                processor since it started
                              format: int64
                              type: integer
                            totalErrors:
                              description: The total count of error flushed encountered
                                by this processor since it started
                              format: int64
                              type: integer
                          type: object
                      type: object
                    type: array
                type: object
          description: Success
        default:
          description: ""
  /status/pins:
    get:
      description: 'TODO: Description'
      operationId: getStatusPins
      parameters:
      - description: Server-side request timeout (millseconds, or set a custom suffix
          like 10s)
        in: header
        name: Request-Timeout
        schema:
          default: 120s
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: batch
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: created
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: dispatched
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: hash
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: index
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: masked
        schema:
          type: string
      - description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^'
        in: query
        name: sequence
        schema:
          type: string
      - description: Sort field. For multi-field sort use comma separated values (or
          multiple query values) with '-' prefix for descending
        in: query
        name: sort
        schema:
          type: string
      - description: Ascending sort order (overrides all fields in a multi-field sort)
        in: query
        name: ascending
        schema:
          type: string
      - description: Descending sort order (overrides all fields in a multi-field
          sort)
        in: query
        name: descending
        schema:
          type: string
      - description: 'The number of records to skip (max: 1,000). Unsuitable for bulk
          operations'
        in: query
        name: skip
        schema:
          type: string
      - description: 'The maximum number of records to return (max: 1,000)'
        in: query
        name: limit
        schema:
          example: "25"
          type: string
      - description: Return a total count as well as items (adds extra database processing)
        in: query
        name: count
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    batch:
                      description: The UUID of the batch of messages this pin is part
                        of
                    batchHash:
                      description: The manifest hash batch of messages this pin is
                        part of
                    created:
                      description: The time the FireFly node created the pin
                    dispatched:
                      description: Once true, this pin has been processed and will
                        not be processed again
                      type: boolean
                    hash:
                      description: The hash represents a topic within a message in
                        the batch. If a message has multiple topics, then multiple
                        pins are created. If the message is private, the hash is masked
                        for privacy
                    index:
                      description: The index of this pin within the batch. One pin
                        is created for each topic, of each message in the batch
                      format: int64
                      type: integer
                    masked:
                      description: True if the pin is for a private message, and hence
                        is masked with the group ID and salted with a nonce so observers
                        of the blockchain cannot use pin hash to match this transaction
                        to other transactions or participants
                      type: boolean
                    sequence:
                      description: The order of the pin in the local FireFly database,
                        which matches the order in which pins were delivered to FireFly
                        by the blockchain connector event stream
                      format: int64
                      type: integer
                    signer:
                      description: The blockchain signing key that submitted this
                        transaction, as passed through to FireFly by the smart contract
                        that emitted the blockchain event
                      type: string
                  type: object
                type: array
          description: Success
        default:
          description: ""
servers:
- url: http://localhost:5000
