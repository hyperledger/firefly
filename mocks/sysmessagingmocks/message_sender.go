// Code generated by mockery v1.0.0. DO NOT EDIT.

package sysmessagingmocks

import (
	context "context"

	sysmessaging "github.com/hyperledger/firefly/internal/sysmessaging"
	mock "github.com/stretchr/testify/mock"
)

// MessageSender is an autogenerated mock type for the MessageSender type
type MessageSender struct {
	mock.Mock
}

// AfterSeal provides a mock function with given fields: cb
func (_m *MessageSender) AfterSeal(cb sysmessaging.SealCallback) sysmessaging.MessageSender {
	ret := _m.Called(cb)

	var r0 sysmessaging.MessageSender
	if rf, ok := ret.Get(0).(func(sysmessaging.SealCallback) sysmessaging.MessageSender); ok {
		r0 = rf(cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sysmessaging.MessageSender)
		}
	}

	return r0
}

// Send provides a mock function with given fields: ctx
func (_m *MessageSender) Send(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendAndWait provides a mock function with given fields: ctx
func (_m *MessageSender) SendAndWait(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
