// Code generated by mockery v1.0.0. DO NOT EDIT.

package definitionsmocks

import (
	context "context"

	definitions "github.com/hyperledger/firefly/internal/definitions"
	database "github.com/hyperledger/firefly/pkg/database"

	fftypes "github.com/hyperledger/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// DefinitionHandlers is an autogenerated mock type for the DefinitionHandlers type
type DefinitionHandlers struct {
	mock.Mock
}

// EnsureLocalGroup provides a mock function with given fields: ctx, group
func (_m *DefinitionHandlers) EnsureLocalGroup(ctx context.Context, group *fftypes.Group) (bool, error) {
	ret := _m.Called(ctx, group)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Group) bool); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.Group) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupByID provides a mock function with given fields: ctx, id
func (_m *DefinitionHandlers) GetGroupByID(ctx context.Context, id string) (*fftypes.Group, error) {
	ret := _m.Called(ctx, id)

	var r0 *fftypes.Group
	if rf, ok := ret.Get(0).(func(context.Context, string) *fftypes.Group); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsNS provides a mock function with given fields: ctx, ns, filter
func (_m *DefinitionHandlers) GetGroupsNS(ctx context.Context, ns string, filter database.AndFilter) ([]*fftypes.Group, *database.FilterResult, error) {
	ret := _m.Called(ctx, ns, filter)

	var r0 []*fftypes.Group
	if rf, ok := ret.Get(0).(func(context.Context, string, database.AndFilter) []*fftypes.Group); ok {
		r0 = rf(ctx, ns, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.Group)
		}
	}

	var r1 *database.FilterResult
	if rf, ok := ret.Get(1).(func(context.Context, string, database.AndFilter) *database.FilterResult); ok {
		r1 = rf(ctx, ns, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*database.FilterResult)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, database.AndFilter) error); ok {
		r2 = rf(ctx, ns, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HandleDefinitionBroadcast provides a mock function with given fields: ctx, msg, data, tx
func (_m *DefinitionHandlers) HandleDefinitionBroadcast(ctx context.Context, msg *fftypes.Message, data []*fftypes.Data, tx *fftypes.UUID) (definitions.DefinitionMessageAction, *definitions.DefinitionBatchActions, error) {
	ret := _m.Called(ctx, msg, data, tx)

	var r0 definitions.DefinitionMessageAction
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Message, []*fftypes.Data, *fftypes.UUID) definitions.DefinitionMessageAction); ok {
		r0 = rf(ctx, msg, data, tx)
	} else {
		r0 = ret.Get(0).(definitions.DefinitionMessageAction)
	}

	var r1 *definitions.DefinitionBatchActions
	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.Message, []*fftypes.Data, *fftypes.UUID) *definitions.DefinitionBatchActions); ok {
		r1 = rf(ctx, msg, data, tx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*definitions.DefinitionBatchActions)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *fftypes.Message, []*fftypes.Data, *fftypes.UUID) error); ok {
		r2 = rf(ctx, msg, data, tx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResolveInitGroup provides a mock function with given fields: ctx, msg
func (_m *DefinitionHandlers) ResolveInitGroup(ctx context.Context, msg *fftypes.Message) (*fftypes.Group, error) {
	ret := _m.Called(ctx, msg)

	var r0 *fftypes.Group
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Message) *fftypes.Group); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.Message) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendReply provides a mock function with given fields: ctx, event, reply
func (_m *DefinitionHandlers) SendReply(ctx context.Context, event *fftypes.Event, reply *fftypes.MessageInOut) {
	_m.Called(ctx, event, reply)
}
