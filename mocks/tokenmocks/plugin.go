// Code generated by mockery v2.40.2. DO NOT EDIT.

package tokenmocks

import (
	context "context"

	config "github.com/hyperledger/firefly-common/pkg/config"

	core "github.com/hyperledger/firefly/pkg/core"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"

	tokens "github.com/hyperledger/firefly/pkg/tokens"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// ActivateTokenPool provides a mock function with given fields: ctx, pool
func (_m *Plugin) ActivateTokenPool(ctx context.Context, pool *core.TokenPool) (core.OpPhase, error) {
	ret := _m.Called(ctx, pool)

	if len(ret) == 0 {
		panic("no return value specified for ActivateTokenPool")
	}

	var r0 core.OpPhase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.TokenPool) (core.OpPhase, error)); ok {
		return rf(ctx, pool)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.TokenPool) core.OpPhase); ok {
		r0 = rf(ctx, pool)
	} else {
		r0 = ret.Get(0).(core.OpPhase)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.TokenPool) error); ok {
		r1 = rf(ctx, pool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BurnTokens provides a mock function with given fields: ctx, nsOpID, poolLocator, burn, methods
func (_m *Plugin) BurnTokens(ctx context.Context, nsOpID string, poolLocator string, burn *core.TokenTransfer, methods *fftypes.JSONAny) error {
	ret := _m.Called(ctx, nsOpID, poolLocator, burn, methods)

	if len(ret) == 0 {
		panic("no return value specified for BurnTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *core.TokenTransfer, *fftypes.JSONAny) error); ok {
		r0 = rf(ctx, nsOpID, poolLocator, burn, methods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *tokens.Capabilities {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Capabilities")
	}

	var r0 *tokens.Capabilities
	if rf, ok := ret.Get(0).(func() *tokens.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.Capabilities)
		}
	}

	return r0
}

// CheckInterface provides a mock function with given fields: ctx, pool, methods
func (_m *Plugin) CheckInterface(ctx context.Context, pool *core.TokenPool, methods []*fftypes.FFIMethod) (*fftypes.JSONAny, error) {
	ret := _m.Called(ctx, pool, methods)

	if len(ret) == 0 {
		panic("no return value specified for CheckInterface")
	}

	var r0 *fftypes.JSONAny
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.TokenPool, []*fftypes.FFIMethod) (*fftypes.JSONAny, error)); ok {
		return rf(ctx, pool, methods)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.TokenPool, []*fftypes.FFIMethod) *fftypes.JSONAny); ok {
		r0 = rf(ctx, pool, methods)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.JSONAny)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.TokenPool, []*fftypes.FFIMethod) error); ok {
		r1 = rf(ctx, pool, methods)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectorName provides a mock function with given fields:
func (_m *Plugin) ConnectorName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectorName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CreateTokenPool provides a mock function with given fields: ctx, nsOpID, pool
func (_m *Plugin) CreateTokenPool(ctx context.Context, nsOpID string, pool *core.TokenPool) (core.OpPhase, error) {
	ret := _m.Called(ctx, nsOpID, pool)

	if len(ret) == 0 {
		panic("no return value specified for CreateTokenPool")
	}

	var r0 core.OpPhase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *core.TokenPool) (core.OpPhase, error)); ok {
		return rf(ctx, nsOpID, pool)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *core.TokenPool) core.OpPhase); ok {
		r0 = rf(ctx, nsOpID, pool)
	} else {
		r0 = ret.Get(0).(core.OpPhase)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *core.TokenPool) error); ok {
		r1 = rf(ctx, nsOpID, pool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateTokenPool provides a mock function with given fields: ctx, pool
func (_m *Plugin) DeactivateTokenPool(ctx context.Context, pool *core.TokenPool) error {
	ret := _m.Called(ctx, pool)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateTokenPool")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.TokenPool) error); ok {
		r0 = rf(ctx, pool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Init provides a mock function with given fields: ctx, cancelCtx, name, _a3
func (_m *Plugin) Init(ctx context.Context, cancelCtx context.CancelFunc, name string, _a3 config.Section) error {
	ret := _m.Called(ctx, cancelCtx, name, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, context.CancelFunc, string, config.Section) error); ok {
		r0 = rf(ctx, cancelCtx, name, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitConfig provides a mock function with given fields: _a0
func (_m *Plugin) InitConfig(_a0 config.Section) {
	_m.Called(_a0)
}

// MintTokens provides a mock function with given fields: ctx, nsOpID, poolLocator, mint, methods
func (_m *Plugin) MintTokens(ctx context.Context, nsOpID string, poolLocator string, mint *core.TokenTransfer, methods *fftypes.JSONAny) error {
	ret := _m.Called(ctx, nsOpID, poolLocator, mint, methods)

	if len(ret) == 0 {
		panic("no return value specified for MintTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *core.TokenTransfer, *fftypes.JSONAny) error); ok {
		r0 = rf(ctx, nsOpID, poolLocator, mint, methods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetHandler provides a mock function with given fields: namespace, handler
func (_m *Plugin) SetHandler(namespace string, handler tokens.Callbacks) {
	_m.Called(namespace, handler)
}

// SetOperationHandler provides a mock function with given fields: namespace, handler
func (_m *Plugin) SetOperationHandler(namespace string, handler core.OperationCallbacks) {
	_m.Called(namespace, handler)
}

// StartNamespace provides a mock function with given fields: ctx, namespace, tokenPools
func (_m *Plugin) StartNamespace(ctx context.Context, namespace string, tokenPools []*core.TokenPool) error {
	ret := _m.Called(ctx, namespace, tokenPools)

	if len(ret) == 0 {
		panic("no return value specified for StartNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*core.TokenPool) error); ok {
		r0 = rf(ctx, namespace, tokenPools)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopNamespace provides a mock function with given fields: ctx, namespace
func (_m *Plugin) StopNamespace(ctx context.Context, namespace string) error {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for StopNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokensApproval provides a mock function with given fields: ctx, nsOpID, poolLocator, approval, methods
func (_m *Plugin) TokensApproval(ctx context.Context, nsOpID string, poolLocator string, approval *core.TokenApproval, methods *fftypes.JSONAny) error {
	ret := _m.Called(ctx, nsOpID, poolLocator, approval, methods)

	if len(ret) == 0 {
		panic("no return value specified for TokensApproval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *core.TokenApproval, *fftypes.JSONAny) error); ok {
		r0 = rf(ctx, nsOpID, poolLocator, approval, methods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferTokens provides a mock function with given fields: ctx, nsOpID, poolLocator, transfer, methods
func (_m *Plugin) TransferTokens(ctx context.Context, nsOpID string, poolLocator string, transfer *core.TokenTransfer, methods *fftypes.JSONAny) error {
	ret := _m.Called(ctx, nsOpID, poolLocator, transfer, methods)

	if len(ret) == 0 {
		panic("no return value specified for TransferTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *core.TokenTransfer, *fftypes.JSONAny) error); ok {
		r0 = rf(ctx, nsOpID, poolLocator, transfer, methods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPlugin creates a new instance of Plugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Plugin {
	mock := &Plugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
