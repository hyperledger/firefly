// Code generated by mockery v1.0.0. DO NOT EDIT.

package eventsmocks

import (
	events "github.com/hyperledger-labs/firefly/pkg/events"
	fftypes "github.com/hyperledger-labs/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// Callbacks is an autogenerated mock type for the Callbacks type
type Callbacks struct {
	mock.Mock
}

// ConnnectionClosed provides a mock function with given fields: connID
func (_m *Callbacks) ConnnectionClosed(connID string) {
	_m.Called(connID)
}

// DeliveryResponse provides a mock function with given fields: connID, inflight
func (_m *Callbacks) DeliveryResponse(connID string, inflight *fftypes.EventDeliveryResponse) error {
	ret := _m.Called(connID, inflight)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *fftypes.EventDeliveryResponse) error); ok {
		r0 = rf(connID, inflight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EphemeralSubscription provides a mock function with given fields: connID, namespace, filter, options
func (_m *Callbacks) EphemeralSubscription(connID string, namespace string, filter *fftypes.SubscriptionFilter, options *fftypes.SubscriptionOptions) error {
	ret := _m.Called(connID, namespace, filter, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *fftypes.SubscriptionFilter, *fftypes.SubscriptionOptions) error); ok {
		r0 = rf(connID, namespace, filter, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterConnection provides a mock function with given fields: connID, matcher
func (_m *Callbacks) RegisterConnection(connID string, matcher events.SubscriptionMatcher) error {
	ret := _m.Called(connID, matcher)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, events.SubscriptionMatcher) error); ok {
		r0 = rf(connID, matcher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
