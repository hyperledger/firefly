// Code generated by mockery v1.0.0. DO NOT EDIT.

package eventsmocks

import (
	context "context"

	config "github.com/hyperledger-labs/firefly/internal/config"

	events "github.com/hyperledger-labs/firefly/pkg/events"

	fftypes "github.com/hyperledger-labs/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *events.Capabilities {
	ret := _m.Called()

	var r0 *events.Capabilities
	if rf, ok := ret.Get(0).(func() *events.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*events.Capabilities)
		}
	}

	return r0
}

// DeliveryRequest provides a mock function with given fields: connID, sub, event, data
func (_m *Plugin) DeliveryRequest(connID string, sub *fftypes.Subscription, event *fftypes.EventDelivery, data []*fftypes.Data) error {
	ret := _m.Called(connID, sub, event, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *fftypes.Subscription, *fftypes.EventDelivery, []*fftypes.Data) error); ok {
		r0 = rf(connID, sub, event, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOptionsSchema provides a mock function with given fields: _a0
func (_m *Plugin) GetOptionsSchema(_a0 context.Context) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Init provides a mock function with given fields: ctx, prefix, callbacks
func (_m *Plugin) Init(ctx context.Context, prefix config.Prefix, callbacks events.Callbacks) error {
	ret := _m.Called(ctx, prefix, callbacks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Prefix, events.Callbacks) error); ok {
		r0 = rf(ctx, prefix, callbacks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitPrefix provides a mock function with given fields: prefix
func (_m *Plugin) InitPrefix(prefix config.Prefix) {
	_m.Called(prefix)
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ValidateOptions provides a mock function with given fields: options
func (_m *Plugin) ValidateOptions(options *fftypes.SubscriptionOptions) error {
	ret := _m.Called(options)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fftypes.SubscriptionOptions) error); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
