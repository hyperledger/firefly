// Code generated by mockery v1.0.0. DO NOT EDIT.

package metricsmocks

import (
	core "github.com/hyperledger/firefly/pkg/core"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// AddTime provides a mock function with given fields: id
func (_m *Manager) AddTime(id string) {
	_m.Called(id)
}

// BlockchainEvent provides a mock function with given fields: location, signature
func (_m *Manager) BlockchainEvent(location string, signature string) {
	_m.Called(location, signature)
}

// BlockchainQuery provides a mock function with given fields: location, methodName
func (_m *Manager) BlockchainQuery(location string, methodName string) {
	_m.Called(location, methodName)
}

// BlockchainTransaction provides a mock function with given fields: location, methodName
func (_m *Manager) BlockchainTransaction(location string, methodName string) {
	_m.Called(location, methodName)
}

// CountBatchPin provides a mock function with given fields:
func (_m *Manager) CountBatchPin() {
	_m.Called()
}

// DeleteTime provides a mock function with given fields: id
func (_m *Manager) DeleteTime(id string) {
	_m.Called(id)
}

// GetTime provides a mock function with given fields: id
func (_m *Manager) GetTime(id string) time.Time {
	ret := _m.Called(id)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IsMetricsEnabled provides a mock function with given fields:
func (_m *Manager) IsMetricsEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MessageConfirmed provides a mock function with given fields: msg, eventType
func (_m *Manager) MessageConfirmed(msg *core.Message, eventType core.FFEnum) {
	_m.Called(msg, eventType)
}

// MessageSubmitted provides a mock function with given fields: msg
func (_m *Manager) MessageSubmitted(msg *core.Message) {
	_m.Called(msg)
}

// Start provides a mock function with given fields:
func (_m *Manager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferConfirmed provides a mock function with given fields: transfer
func (_m *Manager) TransferConfirmed(transfer *core.TokenTransfer) {
	_m.Called(transfer)
}

// TransferSubmitted provides a mock function with given fields: transfer
func (_m *Manager) TransferSubmitted(transfer *core.TokenTransfer) {
	_m.Called(transfer)
}
