// Code generated by mockery v2.40.2. DO NOT EDIT.

package operationmocks

import (
	context "context"

	core "github.com/hyperledger/firefly/pkg/core"
	database "github.com/hyperledger/firefly/pkg/database"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/hyperledger/firefly/internal/operations"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// AddOrReuseOperation provides a mock function with given fields: ctx, op, hooks
func (_m *Manager) AddOrReuseOperation(ctx context.Context, op *core.Operation, hooks ...database.PostCompletionHook) error {
	_va := make([]interface{}, len(hooks))
	for _i := range hooks {
		_va[_i] = hooks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, op)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddOrReuseOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Operation, ...database.PostCompletionHook) error); ok {
		r0 = rf(ctx, op, hooks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkInsertOperations provides a mock function with given fields: ctx, ops
func (_m *Manager) BulkInsertOperations(ctx context.Context, ops ...*core.Operation) error {
	_va := make([]interface{}, len(ops))
	for _i := range ops {
		_va[_i] = ops[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsertOperations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*core.Operation) error); ok {
		r0 = rf(ctx, ops...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOperationByIDCached provides a mock function with given fields: ctx, opID
func (_m *Manager) GetOperationByIDCached(ctx context.Context, opID *fftypes.UUID) (*core.Operation, error) {
	ret := _m.Called(ctx, opID)

	if len(ret) == 0 {
		panic("no return value specified for GetOperationByIDCached")
	}

	var r0 *core.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) (*core.Operation, error)); ok {
		return rf(ctx, opID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) *core.Operation); ok {
		r0 = rf(ctx, opID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.UUID) error); ok {
		r1 = rf(ctx, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareOperation provides a mock function with given fields: ctx, op
func (_m *Manager) PrepareOperation(ctx context.Context, op *core.Operation) (*core.PreparedOperation, error) {
	ret := _m.Called(ctx, op)

	if len(ret) == 0 {
		panic("no return value specified for PrepareOperation")
	}

	var r0 *core.PreparedOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Operation) (*core.PreparedOperation, error)); ok {
		return rf(ctx, op)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.Operation) *core.PreparedOperation); ok {
		r0 = rf(ctx, op)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.PreparedOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.Operation) error); ok {
		r1 = rf(ctx, op)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterHandler provides a mock function with given fields: ctx, handler, ops
func (_m *Manager) RegisterHandler(ctx context.Context, handler operations.OperationHandler, ops []fftypes.FFEnum) {
	_m.Called(ctx, handler, ops)
}

// ResolveOperationByID provides a mock function with given fields: ctx, opID, op
func (_m *Manager) ResolveOperationByID(ctx context.Context, opID *fftypes.UUID, op *core.OperationUpdateDTO) error {
	ret := _m.Called(ctx, opID, op)

	if len(ret) == 0 {
		panic("no return value specified for ResolveOperationByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, *core.OperationUpdateDTO) error); ok {
		r0 = rf(ctx, opID, op)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResubmitOperations provides a mock function with given fields: ctx, txID
func (_m *Manager) ResubmitOperations(ctx context.Context, txID *fftypes.UUID) (int, []*core.Operation, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for ResubmitOperations")
	}

	var r0 int
	var r1 []*core.Operation
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) (int, []*core.Operation, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) int); ok {
		r0 = rf(ctx, txID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.UUID) []*core.Operation); ok {
		r1 = rf(ctx, txID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*core.Operation)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *fftypes.UUID) error); ok {
		r2 = rf(ctx, txID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RetryOperation provides a mock function with given fields: ctx, opID
func (_m *Manager) RetryOperation(ctx context.Context, opID *fftypes.UUID) (*core.Operation, error) {
	ret := _m.Called(ctx, opID)

	if len(ret) == 0 {
		panic("no return value specified for RetryOperation")
	}

	var r0 *core.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) (*core.Operation, error)); ok {
		return rf(ctx, opID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) *core.Operation); ok {
		r0 = rf(ctx, opID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.UUID) error); ok {
		r1 = rf(ctx, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunOperation provides a mock function with given fields: ctx, op, idempotentSubmit
func (_m *Manager) RunOperation(ctx context.Context, op *core.PreparedOperation, idempotentSubmit bool) (fftypes.JSONObject, error) {
	ret := _m.Called(ctx, op, idempotentSubmit)

	if len(ret) == 0 {
		panic("no return value specified for RunOperation")
	}

	var r0 fftypes.JSONObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.PreparedOperation, bool) (fftypes.JSONObject, error)); ok {
		return rf(ctx, op, idempotentSubmit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.PreparedOperation, bool) fftypes.JSONObject); ok {
		r0 = rf(ctx, op, idempotentSubmit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fftypes.JSONObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.PreparedOperation, bool) error); ok {
		r1 = rf(ctx, op, idempotentSubmit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *Manager) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitOperationUpdate provides a mock function with given fields: update
func (_m *Manager) SubmitOperationUpdate(update *core.OperationUpdate) {
	_m.Called(update)
}

// WaitStop provides a mock function with given fields:
func (_m *Manager) WaitStop() {
	_m.Called()
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
