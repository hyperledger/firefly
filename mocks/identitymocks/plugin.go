// Code generated by mockery v1.0.0. DO NOT EDIT.

package identitymocks

import (
	context "context"

	config "github.com/hyperledger/firefly-common/pkg/config"

	identity "github.com/hyperledger/firefly/pkg/identity"

	mock "github.com/stretchr/testify/mock"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *identity.Capabilities {
	ret := _m.Called()

	var r0 *identity.Capabilities
	if rf, ok := ret.Get(0).(func() *identity.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Capabilities)
		}
	}

	return r0
}

// Init provides a mock function with given fields: ctx, _a1, callbacks
func (_m *Plugin) Init(ctx context.Context, _a1 config.Section, callbacks identity.Callbacks) error {
	ret := _m.Called(ctx, _a1, callbacks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Section, identity.Callbacks) error); ok {
		r0 = rf(ctx, _a1, callbacks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitConfig provides a mock function with given fields: _a0
func (_m *Plugin) InitConfig(_a0 config.Section) {
	_m.Called(_a0)
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Plugin) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
