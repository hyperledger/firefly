// Code generated by mockery v1.0.0. DO NOT EDIT.

package shareddownloadmocks

import (
	context "context"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// InitiateDownloadBatch provides a mock function with given fields: ctx, ns, tx, payloadRef
func (_m *Manager) InitiateDownloadBatch(ctx context.Context, ns string, tx *fftypes.UUID, payloadRef string) error {
	ret := _m.Called(ctx, ns, tx, payloadRef)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.UUID, string) error); ok {
		r0 = rf(ctx, ns, tx, payloadRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateDownloadBlob provides a mock function with given fields: ctx, ns, tx, dataID, payloadRef
func (_m *Manager) InitiateDownloadBlob(ctx context.Context, ns string, tx *fftypes.UUID, dataID *fftypes.UUID, payloadRef string) error {
	ret := _m.Called(ctx, ns, tx, dataID, payloadRef)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.UUID, *fftypes.UUID, string) error); ok {
		r0 = rf(ctx, ns, tx, dataID, payloadRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Manager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitStop provides a mock function with given fields:
func (_m *Manager) WaitStop() {
	_m.Called()
}
